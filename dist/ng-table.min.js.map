{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///ng-table.min.js","webpack:///webpack/bootstrap f1c7c80fba1e3b44ae0e","webpack:///external \"angular\"","webpack:///./src/browser/index.js","webpack:///./src/core/index.js","webpack:///./src/browser/filterRow.html","webpack:///./src/browser/filters/number.html","webpack:///./src/browser/filters/select-multiple.html","webpack:///./src/browser/filters/select.html","webpack:///./src/browser/filters/text.html","webpack:///./src/browser/groupRow.html","webpack:///./src/browser/header.html","webpack:///./src/browser/pager.html","webpack:///./src/browser/sorterRow.html","webpack:///./src/browser/ngTable.directive.js","webpack:///./src/browser/ngTableColumn.js","webpack:///./src/browser/ngTableColumnsBinding.directive.js","webpack:///./src/browser/ngTableController.js","webpack:///./src/browser/ngTableDynamic.directive.js","webpack:///./src/browser/ngTableFilterConfig.js","webpack:///./src/browser/ngTableFilterRow.directive.js","webpack:///./src/browser/ngTableFilterRowController.js","webpack:///./src/browser/ngTableGroupRow.directive.js","webpack:///./src/browser/ngTableGroupRowController.js","webpack:///./src/browser/ngTablePagination.directive.js","webpack:///./src/browser/ngTableSelectFilterDs.directive.js","webpack:///./src/browser/ngTableSorterRow.directive.js","webpack:///./src/browser/ngTableSorterRowController.js","webpack:///./src/core/ngTableDefaultGetData.js","webpack:///./src/core/ngTableDefaults.js","webpack:///./src/core/ngTableEventsChannel.js","webpack:///./src/core/ngTableParams.js","webpack:///./index.js"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE_0__","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","value","d","name","getter","Object","defineProperty","configurable","enumerable","get","n","__esModule","o","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_IMPORTED_MODULE_0_angular__","__WEBPACK_IMPORTED_MODULE_0_angular___default","__WEBPACK_IMPORTED_MODULE_1__ngTable_directive__","__WEBPACK_IMPORTED_MODULE_2__ngTableColumn__","__WEBPACK_IMPORTED_MODULE_3__ngTableColumnsBinding_directive__","__WEBPACK_IMPORTED_MODULE_4__ngTableController__","__WEBPACK_IMPORTED_MODULE_5__ngTableDynamic_directive__","__WEBPACK_IMPORTED_MODULE_6__ngTableFilterConfig__","__WEBPACK_IMPORTED_MODULE_7__ngTableFilterRow_directive__","__WEBPACK_IMPORTED_MODULE_8__ngTableFilterRowController__","__WEBPACK_IMPORTED_MODULE_9__ngTableGroupRow_directive__","__WEBPACK_IMPORTED_MODULE_10__ngTableGroupRowController__","__WEBPACK_IMPORTED_MODULE_11__ngTablePagination_directive__","__WEBPACK_IMPORTED_MODULE_12__ngTableSelectFilterDs_directive__","__WEBPACK_IMPORTED_MODULE_13__ngTableSorterRow_directive__","__WEBPACK_IMPORTED_MODULE_14__ngTableSorterRowController__","__WEBPACK_IMPORTED_MODULE_15__filters_number_html__","__WEBPACK_IMPORTED_MODULE_16__filters_select_html__","__WEBPACK_IMPORTED_MODULE_17__filters_select_multiple_html__","__WEBPACK_IMPORTED_MODULE_18__filters_text_html__","__WEBPACK_IMPORTED_MODULE_19__pager_html__","__WEBPACK_IMPORTED_MODULE_20__header_html__","a","directive","controller","provider","__WEBPACK_IMPORTED_MODULE_1__ngTableDefaultGetData__","__WEBPACK_IMPORTED_MODULE_2__ngTableDefaults__","__WEBPACK_IMPORTED_MODULE_3__ngTableParams__","__WEBPACK_IMPORTED_MODULE_4__ngTableEventsChannel__","path","html","angular","run","put","ngTable","$q","$parse","restrict","priority","scope","compile","element","dataRow","groupRow","columns","rows","forEach","find","tr","push","filter","hasClass","item","el","attr","getAttrValue","setAttrValue","parsedAttribute","expr","localValue","context","undefined","assign","$scope","parsedExpr","$parent","titleExpr","id","title","titleAlt","headerTitle","sortable","class","groupable","headerTemplateURL","filterData","show","length","attrs","$columns","buildColumns","setupBindingsToInternalScope","loadFilterData","compileDirectiveTemplates","$inject","ngTableColumn","buildColumn","column","defaultScope","extendedCol","create","defaults","createDefaults","prop","isFunction","prop1","getterSetter","arguments","isScopeLike","getterFn","extend","$column","createGetterSetter","noop","initialValue","newValue","$new","ngTableColumnsBinding","linkFn","$element","$attrs","setter","$watch","newColumns","shallowClone","slice","link","ngTableController","NgTableParams","$timeout","$compile","ngTableEventsChannel","onDataReloadStatusChange","newStatus","params","hasErrorState","settings","currentParams","filterOptions","hasFilterChanges","applyFilter","page","reload","filterDelay","delayFilter","setupFilterRowBindingsToInternalScope","showFilter","show_filter","hasVisibleFilterColumn","disableFilter","$filterRow","disabled","setupGroupRowBindingsToInternalScope","$groupRow","showGroup","showGroupGetter","getVisibleColumns","some","array","predicate","found","obj","commonInit","bindDataToScope","newDatapage","visibleColumns","hasGroup","$groups","visibleColumnCount","$data","bindPagesToScope","newPages","pages","isMyPublisher","publisher","onAfterReloadData","onPagesChanged","$loading","timer","callback","ms","cancel","newParams","oldParams","templates","header","templateHeader","pagination","templatePagination","addClass","headerTemplate","theadFound","children","e","tagName","document","createElement","prepend","paginationTemplate","ng-table-pagination","template-url","after","result","isObject","promise","then","pData","data","isArray","col","parseNgTableDynamicExpr","indexOf","parts","split","tableParams","Error","tableParamsExpr","tableParamsGetter","isUndefined","paramsModel","ngTableDynamic","tElement","row","showExpr","$watchCollection","newCols","ngTableFilterConfigProvider","init","resetConfigs","config","defaultConfig","setConfig","customConfig","mergeConfig","aliasUrls","ngTableFilterConfig","getTemplateUrl","filterDef","filterKey","service","getUrlForAlias","aliasName","defaultBaseUrl","defaultExt","publicConfig","copy","$get","ngTableFilterRow","replace","templateUrl","__WEBPACK_IMPORTED_MODULE_0__filterRow_html___default","__WEBPACK_IMPORTED_MODULE_0__filterRow_html__","ngTableFilterRowController","getFilterCellCss","layout","size","keys","width","parseInt","getFilterPlaceholderValue","filterValue","placeholder","ngTableGroupRow","__WEBPACK_IMPORTED_MODULE_0__groupRow_html___default","controllerAs","__WEBPACK_IMPORTED_MODULE_0__groupRow_html__","ngTableGroupRowController","getGroupables","getGroupTitle","groupBy","isSelectedGroup","toggleDetail","setGroup","changeSortDirection","console","log","newDirection","$selGroup","group","findGroupColumn","groupKey","groupableCols","groupFns","concat","existingGroupCol","$selGroupTitle","groupedColumn","groupOptions","isExpanded","ngTablePagination","pubParams","generatePagesArray","template","ng-include","append","ngTableSelectFilterDs","ngTableSelectFilterDsController","bindDataSource","getSelectListData","hasEmptyOption","unshift","$selectData","isMatch","when","ngTableSorterRow","__WEBPACK_IMPORTED_MODULE_0__sorterRow_html___default","__WEBPACK_IMPORTED_MODULE_0__sorterRow_html__","ngTableSorterRowController","sortBy","event","parsedSortable","defaultSort","inverseSort","sorting","sortingParams","ctrlKey","metaKey","parameters","ngTableDefaultGetDataProvider","ngTableDefaultGetData","$filter","getFilterFn","filterFn","filterFilterName","getOrderByFn","sortingFilterName","hasFilter","filterKeys","parsedFilter","reduce","key","setPath","filterComparator","applyPaging","pagedData","count","total","applySort","orderBy","orderByFn","getData","options","defaultDataOptions","dataOptions","fData","orderedData","ret","lastKey","target","parentPathKeys","ngTableDefaults","$rootScope","addChangeEvent","eventName","fnName","charAt","toUpperCase","substring","createEventSubscriptionFn","createPublishEventFn","handler","eventSelector","identity","requiredPublisher","$on","isNullInstance","eventArgs","rest","fnArgs","apply","Array","$broadcast","events","ngTableParamsFactory","$log","baseParameters","baseSettings","isNumber","isNaN","parseFloat","isFinite","parseGroup","sortDirection","isString","grp","convertSortToOrderBy","createComparableParams","groupSortDirection","hasGlobalSearchFieldChanges","currentVal","$","previousVal","prevParamsMemento","equals","optimizeFilterDelay","defaultFilterOptions","filterDelayThreshold","defaultSettingsFns","runInterceptorPipeline","fetchedData","interceptors","interceptor","thenFn","response","bind","rejectFn","responseError","reject","self","reason","getDefaultSettingFns","dataset","getGroups","groupFn","groupField","getPath","originalDataOptions","gotData","groups","groupName","$hideRows","sortGroups","finally","ks","errParamsMemento","isCommittedDataset","initialEvents","debugMode","debug","filterLayout","defaultGroupOptions","newParameters","parseParamsFromUrl","isDefined","reverse","len","v","newSettings","originalDataset","hasDatasetChanged","fireEvent","publishDatasetChanged","significantFilter","groupArray","sortArray","isSortBy","field","direction","currentPage","totalItems","pageSize","maxBlocks","maxPage","maxPivotPages","minPage","numPages","Math","ceil","type","number","max","active","current","round","paginationMaxBlocks","paginationMinBlocks","min","isDataReloadRequired","hasGroupHeader","showGroupHeader","previousFilter","url","asString","collectValue","pairs","encodeURIComponent","isSignificantValue","subkey","pname","oldData","publishAfterReloadData","reloadPages","catch","currentPages","oldPages","publishPagesChanged","counts","sortingIndicator","publishAfterCreated","__WEBPACK_IMPORTED_MODULE_1__src_core__","__WEBPACK_IMPORTED_MODULE_2__src_browser__"],"mappings":"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","file":"ng-table.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"angular\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"angular\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ng-table\"] = factory(require(\"angular\"));\n\telse\n\t\troot[\"ng-table\"] = factory(root[\"angular\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_0__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"angular\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"angular\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ng-table\"] = factory(require(\"angular\"));\n\telse\n\t\troot[\"ng-table\"] = factory(root[\"angular\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_0__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmory imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmory exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tObject.defineProperty(exports, name, {\n/******/ \t\t\tconfigurable: false,\n/******/ \t\t\tenumerable: true,\n/******/ \t\t\tget: getter\n/******/ \t\t});\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 31);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_0__;\n\n/***/ },\n/* 1 */,\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_angular__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_angular___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_angular__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__ngTable_directive__ = __webpack_require__(13);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__ngTableColumn__ = __webpack_require__(14);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__ngTableColumnsBinding_directive__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__ngTableController__ = __webpack_require__(16);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__ngTableDynamic_directive__ = __webpack_require__(17);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__ngTableFilterConfig__ = __webpack_require__(18);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__ngTableFilterRow_directive__ = __webpack_require__(19);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__ngTableFilterRowController__ = __webpack_require__(20);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__ngTableGroupRow_directive__ = __webpack_require__(21);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__ngTableGroupRowController__ = __webpack_require__(22);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__ngTablePagination_directive__ = __webpack_require__(23);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__ngTableSelectFilterDs_directive__ = __webpack_require__(24);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__ngTableSorterRow_directive__ = __webpack_require__(25);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__ngTableSorterRowController__ = __webpack_require__(26);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__filters_number_html__ = __webpack_require__(5);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__filters_number_html___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_15__filters_number_html__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__filters_select_html__ = __webpack_require__(7);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__filters_select_html___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_16__filters_select_html__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__filters_select_multiple_html__ = __webpack_require__(6);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__filters_select_multiple_html___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_17__filters_select_multiple_html__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__filters_text_html__ = __webpack_require__(8);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__filters_text_html___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_18__filters_text_html__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19__pager_html__ = __webpack_require__(11);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19__pager_html___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_19__pager_html__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20__header_html__ = __webpack_require__(10);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20__header_html___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_20__header_html__);\n\n/* harmony export */ __webpack_require__.d(exports, \"a\", function() { return module; });\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nvar module = __WEBPACK_IMPORTED_MODULE_0_angular___default.a.module('ngTable-browser', [])\r\n    .directive('ngTable', __WEBPACK_IMPORTED_MODULE_1__ngTable_directive__[\"a\" /* ngTable */])\r\n    .factory('ngTableColumn', __WEBPACK_IMPORTED_MODULE_2__ngTableColumn__[\"a\" /* ngTableColumn */])\r\n    .directive('ngTableColumnsBinding', __WEBPACK_IMPORTED_MODULE_3__ngTableColumnsBinding_directive__[\"a\" /* ngTableColumnsBinding */])\r\n    .controller('ngTableController', __WEBPACK_IMPORTED_MODULE_4__ngTableController__[\"a\" /* ngTableController */])\r\n    .directive('ngTableDynamic', __WEBPACK_IMPORTED_MODULE_5__ngTableDynamic_directive__[\"a\" /* ngTableDynamic */])\r\n    .provider('ngTableFilterConfig', __WEBPACK_IMPORTED_MODULE_6__ngTableFilterConfig__[\"a\" /* ngTableFilterConfigProvider */])\r\n    .directive('ngTableFilterRow', __WEBPACK_IMPORTED_MODULE_7__ngTableFilterRow_directive__[\"a\" /* ngTableFilterRow */])\r\n    .controller('ngTableFilterRowController', __WEBPACK_IMPORTED_MODULE_8__ngTableFilterRowController__[\"a\" /* ngTableFilterRowController */])\r\n    .directive('ngTableGroupRow', __WEBPACK_IMPORTED_MODULE_9__ngTableGroupRow_directive__[\"a\" /* ngTableGroupRow */])\r\n    .controller('ngTableGroupRowController', __WEBPACK_IMPORTED_MODULE_10__ngTableGroupRowController__[\"a\" /* ngTableGroupRowController */])\r\n    .directive('ngTablePagination', __WEBPACK_IMPORTED_MODULE_11__ngTablePagination_directive__[\"a\" /* ngTablePagination */])\r\n    .directive('ngTableSelectFilterDs', __WEBPACK_IMPORTED_MODULE_12__ngTableSelectFilterDs_directive__[\"a\" /* ngTableSelectFilterDs */])\r\n    .directive('ngTableSorterRow', __WEBPACK_IMPORTED_MODULE_13__ngTableSorterRow_directive__[\"a\" /* ngTableSorterRow */])\r\n    .controller('ngTableSorterRowController', __WEBPACK_IMPORTED_MODULE_14__ngTableSorterRowController__[\"a\" /* ngTableSorterRowController */]);\r\n\r\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_angular__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_angular___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_angular__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__ngTableDefaultGetData__ = __webpack_require__(27);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__ngTableDefaults__ = __webpack_require__(28);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__ngTableParams__ = __webpack_require__(30);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__ngTableEventsChannel__ = __webpack_require__(29);\n\n/* harmony export */ __webpack_require__.d(exports, \"a\", function() { return module; });\r\n\r\n\r\n\r\n\r\n\r\nvar module = __WEBPACK_IMPORTED_MODULE_0_angular___default.a.module('ngTable-core', [])\r\n    .provider('ngTableDefaultGetData', __WEBPACK_IMPORTED_MODULE_1__ngTableDefaultGetData__[\"a\" /* ngTableDefaultGetDataProvider */])\r\n    .value('ngTableDefaults',__WEBPACK_IMPORTED_MODULE_2__ngTableDefaults__[\"a\" /* ngTableDefaults */])\r\n    .factory('NgTableParams', __WEBPACK_IMPORTED_MODULE_3__ngTableParams__[\"a\" /* ngTableParamsFactory */])\r\n    .factory('ngTableEventsChannel', __WEBPACK_IMPORTED_MODULE_4__ngTableEventsChannel__[\"a\" /* ngTableEventsChannel */]);\r\n\r\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar path = 'ng-table/filterRow.html';\nvar html = \"<tr ng-show=show_filter class=ng-table-filters> <th data-title-text=\\\"{{$column.titleAlt(this) || $column.title(this)}}\\\" ng-repeat=\\\"$column in $columns\\\" ng-if=$column.show(this) class=\\\"filter {{$column.class(this)}}\\\" ng-class=\\\"params.settings().filterOptions.filterLayout === 'horizontal' ? 'filter-horizontal' : ''\\\"> <div ng-repeat=\\\"(name, filter) in $column.filter(this)\\\" ng-include=config.getTemplateUrl(filter) class=filter-cell ng-class=\\\"[getFilterCellCss($column.filter(this), params.settings().filterOptions.filterLayout), $last ? 'last' : '']\\\"> </div> </th> </tr>\";\nvar angular = __webpack_require__(0);\nangular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\nmodule.exports = path;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar path = 'ng-table/filters/number.html';\nvar html = \"<input type=number name={{name}} ng-disabled=$filterRow.disabled ng-model=params.filter()[name] class=\\\"input-filter form-control\\\" placeholder=\\\"{{getFilterPlaceholderValue(filter, name)}}\\\"/>\";\nvar angular = __webpack_require__(0);\nangular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\nmodule.exports = path;\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar path = 'ng-table/filters/select-multiple.html';\nvar html = \"<select ng-options=\\\"data.id as data.title for data in $column.data\\\" ng-disabled=$filterRow.disabled multiple=multiple ng-multiple=true ng-model=params.filter()[name] class=\\\"filter filter-select-multiple form-control\\\" name={{name}}> </select>\";\nvar angular = __webpack_require__(0);\nangular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\nmodule.exports = path;\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar path = 'ng-table/filters/select.html';\nvar html = \"<select ng-options=\\\"data.id as data.title for data in $selectData\\\" ng-table-select-filter-ds=$column ng-disabled=$filterRow.disabled ng-model=params.filter()[name] class=\\\"filter filter-select form-control\\\" name={{name}}> <option style=display:none value=\\\"\\\"></option> </select>\";\nvar angular = __webpack_require__(0);\nangular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\nmodule.exports = path;\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar path = 'ng-table/filters/text.html';\nvar html = \"<input type=text name={{name}} ng-disabled=$filterRow.disabled ng-model=params.filter()[name] class=\\\"input-filter form-control\\\" placeholder=\\\"{{getFilterPlaceholderValue(filter, name)}}\\\"/>\";\nvar angular = __webpack_require__(0);\nangular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\nmodule.exports = path;\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar path = 'ng-table/groupRow.html';\nvar html = \"<tr ng-if=\\\"params.hasGroup() && params.hasGroupHeader()\\\" ng-show=$groupRow.show class=ng-table-group-header> <th colspan={{getVisibleColumns().length}} class=sortable ng-class=\\\"{\\r\\n                    'sort-asc': params.hasGroup($selGroup, 'asc'),\\r\\n                    'sort-desc':params.hasGroup($selGroup, 'desc')\\r\\n                  }\\\"> <a href=\\\"\\\" ng-click=\\\"isSelectorOpen = !isSelectorOpen\\\" class=ng-table-group-selector> <strong class=sort-indicator>{{$selGroupTitle}}</strong> <button class=\\\"btn btn-default btn-xs ng-table-group-close\\\" ng-click=\\\"$groupRow.show = false; $event.preventDefault(); $event.stopPropagation();\\\"> <span class=\\\"glyphicon glyphicon-remove\\\"></span> </button> <button class=\\\"btn btn-default btn-xs ng-table-group-toggle\\\" ng-click=\\\"toggleDetail(); $event.preventDefault(); $event.stopPropagation();\\\"> <span class=glyphicon ng-class=\\\"{\\r\\n                    'glyphicon-resize-small': params.settings().groupOptions.isExpanded,\\r\\n                    'glyphicon-resize-full': !params.settings().groupOptions.isExpanded\\r\\n                }\\\"></span> </button> </a> <div class=list-group ng-if=isSelectorOpen> <a href=\\\"\\\" class=list-group-item ng-repeat=\\\"group in getGroupables()\\\" ng-click=groupBy(group)> <strong>{{ getGroupTitle(group)}}</strong> <strong ng-class=\\\"isSelectedGroup(group) && 'sort-indicator'\\\"></strong> </a> </div> </th> </tr>\";\nvar angular = __webpack_require__(0);\nangular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\nmodule.exports = path;\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar path = 'ng-table/header.html';\nvar html = \"<ng-table-group-row></ng-table-group-row> <ng-table-sorter-row></ng-table-sorter-row> <ng-table-filter-row></ng-table-filter-row>\";\nvar angular = __webpack_require__(0);\nangular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\nmodule.exports = path;\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar path = 'ng-table/pager.html';\nvar html = \"<div class=\\\"ng-cloak ng-table-pager\\\" ng-if=params.data.length> <div ng-if=params.settings().counts.length class=\\\"ng-table-counts btn-group pull-right\\\"> <button ng-repeat=\\\"count in params.settings().counts\\\" type=button ng-class=\\\"{'active':params.count() == count}\\\" ng-click=params.count(count) class=\\\"btn btn-default\\\"> <span ng-bind=count></span> </button> </div> <ul ng-if=pages.length class=\\\"pagination ng-table-pagination\\\"> <li ng-class=\\\"{'disabled': !page.active && !page.current, 'active': page.current}\\\" ng-repeat=\\\"page in pages\\\" ng-switch=page.type> <a ng-switch-when=prev ng-click=params.page(page.number) href=\\\"\\\">&laquo;</a> <a ng-switch-when=first ng-click=params.page(page.number) href=\\\"\\\"><span ng-bind=page.number></span></a> <a ng-switch-when=page ng-click=params.page(page.number) href=\\\"\\\"><span ng-bind=page.number></span></a> <a ng-switch-when=more ng-click=params.page(page.number) href=\\\"\\\">&#8230;</a> <a ng-switch-when=last ng-click=params.page(page.number) href=\\\"\\\"><span ng-bind=page.number></span></a> <a ng-switch-when=next ng-click=params.page(page.number) href=\\\"\\\">&raquo;</a> </li> </ul> </div>\";\nvar angular = __webpack_require__(0);\nangular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\nmodule.exports = path;\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar path = 'ng-table/sorterRow.html';\nvar html = \"<tr class=ng-table-sort-header> <th title={{$column.headerTitle(this)}} ng-repeat=\\\"$column in $columns\\\" ng-class=\\\"{\\r\\n                    'sortable': $column.sortable(this),\\r\\n                    'sort-asc': params.sorting()[$column.sortable(this)]=='asc',\\r\\n                    'sort-desc': params.sorting()[$column.sortable(this)]=='desc'\\r\\n                  }\\\" ng-click=\\\"sortBy($column, $event)\\\" ng-if=$column.show(this) ng-init=\\\"template = $column.headerTemplateURL(this)\\\" class=\\\"header {{$column.class(this)}}\\\"> <div ng-if=!template class=ng-table-header ng-class=\\\"{'sort-indicator': params.settings().sortingIndicator == 'div'}\\\"> <span ng-bind=$column.title(this) ng-class=\\\"{'sort-indicator': params.settings().sortingIndicator == 'span'}\\\"></span> </div> <div ng-if=template ng-include=template></div> </th> </tr>\";\nvar angular = __webpack_require__(0);\nangular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\nmodule.exports = path;\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_angular__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_angular___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_angular__);\n\n/* harmony export */ __webpack_require__.d(exports, \"a\", function() { return ngTable; });/**\r\n * ngTable: Table + Angular JS\r\n *\r\n * @author Vitalii Savchuk <esvit666@gmail.com>\r\n * @url https://github.com/esvit/ng-table/\r\n * @license New BSD License <http://creativecommons.org/licenses/BSD/>\r\n */\r\n\r\n    \r\n/**\r\n * @ngdoc directive\r\n * @name ngTable\r\n * @module ngTable\r\n * @restrict A\r\n *\r\n * @description\r\n * Directive that instantiates {@link ngTableController ngTableController}.\r\n */\r\nngTable.$inject = ['$q', '$parse'];\r\n\r\nfunction ngTable($q, $parse) {\r\n\r\n    return {\r\n        restrict: 'A',\r\n        priority: 1001,\r\n        scope: true,\r\n        controller: 'ngTableController',\r\n        compile: function(element) {\r\n            var columns = [],\r\n                i = 0,\r\n                dataRow,\r\n                groupRow,\r\n                rows = [];\r\n\r\n            __WEBPACK_IMPORTED_MODULE_0_angular___default.a.forEach(element.find('tr'), function(tr) {\r\n                rows.push(__WEBPACK_IMPORTED_MODULE_0_angular___default.a.element(tr))\r\n            });\r\n            dataRow = rows.filter(function(tr){\r\n                return !tr.hasClass('ng-table-group');\r\n            })[0];\r\n            groupRow = rows.filter(function(tr){\r\n                return tr.hasClass('ng-table-group');\r\n            })[0];\r\n\r\n            if (!dataRow) {\r\n                return;\r\n            }\r\n            __WEBPACK_IMPORTED_MODULE_0_angular___default.a.forEach(dataRow.find('td'), function(item) {\r\n                var el = __WEBPACK_IMPORTED_MODULE_0_angular___default.a.element(item);\r\n                if (el.attr('ignore-cell') && 'true' === el.attr('ignore-cell')) {\r\n                    return;\r\n                }\r\n\r\n                var getAttrValue = function(attr){\r\n                    return el.attr('x-data-' + attr) || el.attr('data-' + attr) || el.attr(attr);\r\n                };\r\n                var setAttrValue = function(attr, value){\r\n                    if (el.attr('x-data-' + attr)){\r\n                        el.attr('x-data-' + attr, value)\r\n                    } else if (el.attr('data' + attr)){\r\n                        el.attr('data' + attr, value)\r\n                    } else {\r\n                        el.attr(attr, value)\r\n                    }\r\n                };\r\n\r\n                var parsedAttribute = function(attr) {\r\n                    var expr = getAttrValue(attr);\r\n                    if (!expr){\r\n                        return undefined;\r\n                    }\r\n\r\n                    var localValue;\r\n                    var getter = function (context) {\r\n                        if (localValue !== undefined){\r\n                            return localValue;\r\n                        }\r\n                        return $parse(expr)(context);\r\n                    };\r\n                    getter.assign = function($scope, value){\r\n                        var parsedExpr = $parse(expr);\r\n                        if (parsedExpr.assign) {\r\n                            // we should be writing back to the parent scope as this is where the expression\r\n                            // came from\r\n                            parsedExpr.assign($scope.$parent, value);\r\n                        } else {\r\n                            localValue = value;\r\n                        }\r\n                    };\r\n                    return getter;\r\n                };\r\n                var titleExpr = getAttrValue('title-alt') || getAttrValue('title');\r\n                if (titleExpr){\r\n                    el.attr('data-title-text', '{{' + titleExpr + '}}'); // this used in responsive table\r\n                }\r\n                // NOTE TO MAINTAINERS: if you add extra fields to a $column be sure to extend ngTableColumn with\r\n                // a corresponding \"safe\" default\r\n                columns.push({\r\n                    id: i++,\r\n                    title: parsedAttribute('title'),\r\n                    titleAlt: parsedAttribute('title-alt'),\r\n                    headerTitle: parsedAttribute('header-title'),\r\n                    sortable: parsedAttribute('sortable'),\r\n                    'class': parsedAttribute('header-class'),\r\n                    filter: parsedAttribute('filter'),\r\n                    groupable: parsedAttribute('groupable'),\r\n                    headerTemplateURL: parsedAttribute('header'),\r\n                    filterData: parsedAttribute('filter-data'),\r\n                    show: el.attr(\"ng-if\") ? parsedAttribute('ng-if') : undefined\r\n                });\r\n\r\n                if (groupRow || el.attr(\"ng-if\")){\r\n                    // change ng-if to bind to our column definition which we know will be writable\r\n                    // because this will potentially increase the $watch count, only do so if we already have an\r\n                    // ng-if or when we definitely need to change visibility of the columns.\r\n                    // currently only ngTableGroupRow directive needs to change visibility\r\n                    setAttrValue('ng-if', '$columns[' + (columns.length - 1) + '].show(this)');\r\n                }\r\n            });\r\n            return function(scope, element, attrs, controller) {\r\n                scope.$columns = columns = controller.buildColumns(columns);\r\n\r\n                controller.setupBindingsToInternalScope(attrs.ngTable);\r\n                controller.loadFilterData(columns);\r\n                controller.compileDirectiveTemplates();\r\n            };\r\n        }\r\n    }\r\n}\r\n\r\n\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_angular__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_angular___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_angular__);\n\n/* harmony export */ __webpack_require__.d(exports, \"a\", function() { return ngTableColumn; });/**\r\n * ngTable: Table + Angular JS\r\n *\r\n * @author Vitalii Savchuk <esvit666@gmail.com>\r\n * @url https://github.com/esvit/ng-table/\r\n * @license New BSD License <http://creativecommons.org/licenses/BSD/>\r\n */\r\n\r\n\r\n\r\n/**\r\n * @ngdoc service\r\n * @name ngTableColumn\r\n * @module ngTable\r\n * @description\r\n * Service to construct a $column definition used by {@link ngTable ngTable} directive\r\n */\r\nngTableColumn.$inject = [];\r\n\r\nfunction ngTableColumn() {\r\n\r\n    return {\r\n        buildColumn: buildColumn\r\n    };\r\n\r\n    //////////////\r\n\r\n    /**\r\n     * @ngdoc method\r\n     * @name ngTableColumn#buildColumn\r\n     * @description Creates a $column for use within a header template\r\n     *\r\n     * @param {Object} column an existing $column or simple column data object\r\n     * @param {Scope} defaultScope the $scope to supply to the $column getter methods when not supplied by caller\r\n     * @param {Array} columns a reference to the columns array to make available on the context supplied to the\r\n     * $column getter methods\r\n     * @returns {Object} a $column object\r\n     */\r\n    function buildColumn(column, defaultScope, columns){\r\n        // note: we're not modifying the original column object. This helps to avoid unintended side affects\r\n        var extendedCol = Object.create(column);\r\n        var defaults = createDefaults();\r\n        for (var prop in defaults) {\r\n            if (extendedCol[prop] === undefined) {\r\n                extendedCol[prop] = defaults[prop];\r\n            }\r\n            if(!__WEBPACK_IMPORTED_MODULE_0_angular___default.a.isFunction(extendedCol[prop])){\r\n                // wrap raw field values with \"getter\" functions\r\n                // - this is to ensure consistency with how ngTable.compile builds columns\r\n                // - note that the original column object is being \"proxied\"; this is important\r\n                //   as it ensure that any changes to the original object will be returned by the \"getter\"\r\n                (function(prop1){\r\n                    var getterSetter = function getterSetter(/*[value] || [$scope, locals]*/) {\r\n                        if (arguments.length === 1 && !isScopeLike(arguments[0])) {\r\n                            getterSetter.assign(null, arguments[0]);\r\n                        } else {\r\n                            return column[prop1];\r\n                        }\r\n                    };\r\n                    getterSetter.assign = function($scope, value){\r\n                        column[prop1] = value;\r\n                    };\r\n                    extendedCol[prop1] = getterSetter;\r\n                })(prop);\r\n            }\r\n            (function(prop1){\r\n                // satisfy the arguments expected by the function returned by parsedAttribute in the ngTable directive\r\n                var getterFn = extendedCol[prop1];\r\n                extendedCol[prop1] = function () {\r\n                    if (arguments.length === 1 && !isScopeLike(arguments[0])){\r\n                        getterFn.assign(null, arguments[0]);\r\n                    } else {\r\n                        var scope = arguments[0] || defaultScope;\r\n                        var context = Object.create(scope);\r\n                        __WEBPACK_IMPORTED_MODULE_0_angular___default.a.extend(context, {\r\n                            $column: extendedCol,\r\n                            $columns: columns\r\n                        });\r\n                        return getterFn.call(column, context);\r\n                    }\r\n                };\r\n                if (getterFn.assign){\r\n                    extendedCol[prop1].assign = getterFn.assign;\r\n                }\r\n            })(prop);\r\n        }\r\n        return extendedCol;\r\n    }\r\n\r\n    function createDefaults(){\r\n        return {\r\n            'class': createGetterSetter(''),\r\n            filter: createGetterSetter(false),\r\n            groupable: createGetterSetter(false),\r\n            filterData: __WEBPACK_IMPORTED_MODULE_0_angular___default.a.noop,\r\n            headerTemplateURL: createGetterSetter(false),\r\n            headerTitle: createGetterSetter(''),\r\n            sortable: createGetterSetter(false),\r\n            show: createGetterSetter(true),\r\n            title: createGetterSetter(''),\r\n            titleAlt: createGetterSetter('')\r\n        };\r\n    }\r\n\r\n    function createGetterSetter(initialValue){\r\n        var value = initialValue;\r\n        var getterSetter = function getterSetter(/*[value] || [$scope, locals]*/){\r\n            if (arguments.length === 1 && !isScopeLike(arguments[0])) {\r\n                getterSetter.assign(null, arguments[0]);\r\n            } else {\r\n                return value;\r\n            }\r\n        };\r\n        getterSetter.assign = function($scope, newValue){\r\n            value = newValue;\r\n        };\r\n        return getterSetter;\r\n    }\r\n\r\n    function isScopeLike(object){\r\n        return object != null && __WEBPACK_IMPORTED_MODULE_0_angular___default.a.isFunction(object.$new);\r\n    }\r\n}\r\n\r\n\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/* harmony export */ __webpack_require__.d(exports, \"a\", function() { return ngTableColumnsBinding; });/**\r\n * ngTable: Table + Angular JS\r\n *\r\n * @author Vitalii Savchuk <esvit666@gmail.com>\r\n * @url https://github.com/esvit/ng-table/\r\n * @license New BSD License <http://creativecommons.org/licenses/BSD/>\r\n */\r\n\r\nngTableColumnsBinding.$inject = [\"$parse\"];\r\n\r\n/**\r\n * @ngdoc directive\r\n * @name ngTableColumnsBinding\r\n * @description One-way data binds the $columns array generated by ngTable/ngTableDynamic to the specified\r\n * expression.\r\n *\r\n * This allows the $columns array to be accessed outside of the html table markup\r\n */\r\nfunction ngTableColumnsBinding($parse){\r\n    var directive = {\r\n        restrict: 'A',\r\n        require: 'ngTable',\r\n        link: linkFn\r\n    };\r\n    return directive;\r\n\r\n    function linkFn($scope, $element, $attrs){\r\n        var setter = $parse($attrs.ngTableColumnsBinding).assign;\r\n        if (setter){\r\n            $scope.$watch('$columns', function(newColumns){\r\n                var shallowClone = (newColumns || []).slice(0);\r\n                setter($scope, shallowClone);\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\n\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_angular__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_angular___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_angular__);\n\n/* harmony export */ __webpack_require__.d(exports, \"a\", function() { return ngTableController; });/**\r\n * ngTable: Table + Angular JS\r\n *\r\n * @author Vitalii Savchuk <esvit666@gmail.com>\r\n * @url https://github.com/esvit/ng-table/\r\n * @license New BSD License <http://creativecommons.org/licenses/BSD/>\r\n */\r\n\r\n\r\n\r\n/**\r\n * @ngdoc object\r\n * @name ngTableController\r\n *\r\n * @description\r\n * Each {@link ngTable ngTable} directive creates an instance of `ngTableController`\r\n */\r\nngTableController.$inject = [\r\n    '$scope', 'NgTableParams', '$timeout', '$parse', '$compile', '$attrs', '$element', 'ngTableColumn', 'ngTableEventsChannel'\r\n];\r\n\r\nfunction ngTableController($scope, NgTableParams, $timeout, $parse, $compile, $attrs, $element, ngTableColumn, ngTableEventsChannel) {\r\n    var isFirstTimeLoad = true;\r\n    $scope.$filterRow = {};\r\n    $scope.$loading = false;\r\n\r\n    // until such times as the directive uses an isolated scope, we need to ensure that the check for\r\n    // the params field only consults the \"own properties\" of the $scope. This is to avoid seeing the params\r\n    // field on a $scope higher up in the prototype chain\r\n    if (!$scope.hasOwnProperty(\"params\")) {\r\n        $scope.params = new NgTableParams(true);\r\n    }\r\n    $scope.params.settings().$scope = $scope;\r\n\r\n    var delayFilter = (function() {\r\n        var timer = 0;\r\n        return function(callback, ms) {\r\n            $timeout.cancel(timer);\r\n            timer = $timeout(callback, ms);\r\n        };\r\n    })();\r\n\r\n    function onDataReloadStatusChange (newStatus/*, oldStatus*/) {\r\n        if (!newStatus || $scope.params.hasErrorState()) {\r\n            return;\r\n        }\r\n\r\n        $scope.params.settings().$scope = $scope;\r\n\r\n        var currentParams = $scope.params;\r\n        var filterOptions = currentParams.settings().filterOptions;\r\n\r\n        if (currentParams.hasFilterChanges()) {\r\n            var applyFilter = function () {\r\n                currentParams.page(1);\r\n                currentParams.reload();\r\n            };\r\n            if (filterOptions.filterDelay) {\r\n                delayFilter(applyFilter, filterOptions.filterDelay);\r\n            } else {\r\n                applyFilter();\r\n            }\r\n        } else {\r\n            currentParams.reload();\r\n        }\r\n    }\r\n\r\n    // watch for when a new NgTableParams is bound to the scope\r\n    // CRITICAL: the watch must be for reference and NOT value equality; this is because NgTableParams maintains\r\n    // the current data page as a field. Checking this for value equality would be terrible for performance\r\n    // and potentially cause an error if the items in that array has circular references\r\n    $scope.$watch('params', function(newParams, oldParams){\r\n        if (newParams === oldParams || !newParams) {\r\n            return;\r\n        }\r\n\r\n        newParams.reload();\r\n    }, false);\r\n\r\n    $scope.$watch('params.isDataReloadRequired()', onDataReloadStatusChange);\r\n\r\n    this.compileDirectiveTemplates = function () {\r\n        if (!$element.hasClass('ng-table')) {\r\n            $scope.templates = {\r\n                header: ($attrs.templateHeader ? $attrs.templateHeader : 'ng-table/header.html'),\r\n                pagination: ($attrs.templatePagination ? $attrs.templatePagination : 'ng-table/pager.html')\r\n            };\r\n            $element.addClass('ng-table');\r\n            var headerTemplate = null;\r\n\r\n            // $element.find('> thead').length === 0 doesn't work on jqlite\r\n            var theadFound = false;\r\n            __WEBPACK_IMPORTED_MODULE_0_angular___default.a.forEach($element.children(), function(e) {\r\n                if (e.tagName === 'THEAD') {\r\n                    theadFound = true;\r\n                }\r\n            });\r\n            if (!theadFound) {\r\n                headerTemplate = __WEBPACK_IMPORTED_MODULE_0_angular___default.a.element(document.createElement('thead')).attr('ng-include', 'templates.header');\r\n                $element.prepend(headerTemplate);\r\n            }\r\n            var paginationTemplate = __WEBPACK_IMPORTED_MODULE_0_angular___default.a.element(document.createElement('div')).attr({\r\n                'ng-table-pagination': 'params',\r\n                'template-url': 'templates.pagination'\r\n            });\r\n            $element.after(paginationTemplate);\r\n            if (headerTemplate) {\r\n                $compile(headerTemplate)($scope);\r\n            }\r\n            $compile(paginationTemplate)($scope);\r\n        }\r\n    };\r\n\r\n    this.loadFilterData = function ($columns) {\r\n        __WEBPACK_IMPORTED_MODULE_0_angular___default.a.forEach($columns, function ($column) {\r\n            var result;\r\n            result = $column.filterData($scope);\r\n            if (!result) {\r\n                delete $column.filterData;\r\n                return;\r\n            }\r\n\r\n            // if we're working with a deferred object or a promise, let's wait for the promise\r\n            /* WARNING: support for returning a $defer is depreciated */\r\n            if ((__WEBPACK_IMPORTED_MODULE_0_angular___default.a.isObject(result) && (__WEBPACK_IMPORTED_MODULE_0_angular___default.a.isObject(result.promise) || __WEBPACK_IMPORTED_MODULE_0_angular___default.a.isFunction(result.then)))) {\r\n                var pData = __WEBPACK_IMPORTED_MODULE_0_angular___default.a.isFunction(result.then) ? result : result.promise;\r\n                delete $column.filterData;\r\n                return pData.then(function(data) {\r\n                    // our deferred can eventually return arrays, functions and objects\r\n                    if (!__WEBPACK_IMPORTED_MODULE_0_angular___default.a.isArray(data) && !__WEBPACK_IMPORTED_MODULE_0_angular___default.a.isFunction(data) && !__WEBPACK_IMPORTED_MODULE_0_angular___default.a.isObject(data)) {\r\n                        // if none of the above was found - we just want an empty array\r\n                        data = [];\r\n                    }\r\n                    $column.data = data;\r\n                });\r\n            }\r\n            // otherwise, we just return what the user gave us. It could be a function, array, object, whatever\r\n            else {\r\n                return $column.data = result;\r\n            }\r\n        });\r\n    };\r\n\r\n    this.buildColumns = function (columns) {\r\n        var result = [];\r\n        (columns || []).forEach(function(col){\r\n            result.push(ngTableColumn.buildColumn(col, $scope, result));\r\n        });\r\n        return result\r\n    };\r\n\r\n    this.parseNgTableDynamicExpr = function (attr) {\r\n        if (!attr || attr.indexOf(\" with \") > -1) {\r\n            var parts = attr.split(/\\s+with\\s+/);\r\n            return {\r\n                tableParams: parts[0],\r\n                columns: parts[1]\r\n            };\r\n        } else {\r\n            throw new Error('Parse error (expected example: ng-table-dynamic=\\'tableParams with cols\\')');\r\n        }\r\n    };\r\n\r\n    this.setupBindingsToInternalScope = function(tableParamsExpr){\r\n\r\n        // note: this we're setting up watches to simulate angular's isolated scope bindings\r\n\r\n        // note: is REALLY important to watch for a change to the ngTableParams *reference* rather than\r\n        // $watch for value equivalence. This is because ngTableParams references the current page of data as\r\n        // a field and it's important not to watch this\r\n        var tableParamsGetter = $parse(tableParamsExpr);\r\n        $scope.$watch(tableParamsGetter, (function (params) {\r\n            if (__WEBPACK_IMPORTED_MODULE_0_angular___default.a.isUndefined(params)) {\r\n                return;\r\n            }\r\n            $scope.paramsModel = tableParamsGetter;\r\n            $scope.params = params;\r\n        }), false);\r\n\r\n        setupFilterRowBindingsToInternalScope();\r\n        setupGroupRowBindingsToInternalScope();\r\n    };\r\n\r\n    function setupFilterRowBindingsToInternalScope(){\r\n        if ($attrs.showFilter) {\r\n            $scope.$parent.$watch($attrs.showFilter, function(value) {\r\n                $scope.show_filter = value;\r\n            });\r\n        } else {\r\n            $scope.$watch(hasVisibleFilterColumn, function(value){\r\n                $scope.show_filter = value;\r\n            })\r\n        }\r\n\r\n        if ($attrs.disableFilter) {\r\n            $scope.$parent.$watch($attrs.disableFilter, function(value) {\r\n                $scope.$filterRow.disabled = value;\r\n            });\r\n        }\r\n    }\r\n\r\n    function setupGroupRowBindingsToInternalScope(){\r\n        $scope.$groupRow = {};\r\n        if ($attrs.showGroup) {\r\n            var showGroupGetter = $parse($attrs.showGroup);\r\n            $scope.$parent.$watch(showGroupGetter, function(value) {\r\n                $scope.$groupRow.show = value;\r\n            });\r\n            if (showGroupGetter.assign){\r\n                // setup two-way databinding thus allowing ngTableGrowRow to assign to the showGroup expression\r\n                $scope.$watch('$groupRow.show', function(value) {\r\n                    showGroupGetter.assign($scope.$parent, value);\r\n                });\r\n            }\r\n        } else{\r\n            $scope.$watch('params.hasGroup()', function(newValue) {\r\n                $scope.$groupRow.show = newValue;\r\n            });\r\n        }\r\n    }\r\n\r\n    function getVisibleColumns(){\r\n        return ($scope.$columns || []).filter(function(c){\r\n            return c.show($scope);\r\n        });\r\n    }\r\n\r\n    function hasVisibleFilterColumn(){\r\n        if (!$scope.$columns) return false;\r\n\r\n        return some($scope.$columns, function($column){\r\n            return $column.show($scope) && $column.filter($scope);\r\n        });\r\n    }\r\n\r\n    function some(array, predicate){\r\n        var found = false;\r\n        for (var i = 0; i < array.length; i++) {\r\n            var obj = array[i];\r\n            if (predicate(obj)){\r\n                found = true;\r\n                break;\r\n            }\r\n        }\r\n        return found;\r\n    }\r\n\r\n    function commonInit(){\r\n        ngTableEventsChannel.onAfterReloadData(bindDataToScope, $scope, isMyPublisher);\r\n        ngTableEventsChannel.onPagesChanged(bindPagesToScope, $scope, isMyPublisher);\r\n\r\n        function bindDataToScope(params, newDatapage){\r\n            var visibleColumns = getVisibleColumns();\r\n            if (params.hasGroup()) {\r\n                $scope.$groups = newDatapage || [];\r\n                $scope.$groups.visibleColumnCount = visibleColumns.length;\r\n            } else {\r\n                $scope.$data = newDatapage || [];\r\n                $scope.$data.visibleColumnCount = visibleColumns.length;\r\n            }\r\n        }\r\n\r\n        function bindPagesToScope(params, newPages){\r\n            $scope.pages = newPages\r\n        }\r\n\r\n        function isMyPublisher(publisher){\r\n            return $scope.params === publisher;\r\n        }\r\n    }\r\n\r\n    commonInit();\r\n}\r\n\r\n\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_angular__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_angular___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_angular__);\n\n/* harmony export */ __webpack_require__.d(exports, \"a\", function() { return ngTableDynamic; });/**\r\n * ngTable: Table + Angular JS\r\n *\r\n * @author Vitalii Savchuk <esvit666@gmail.com>\r\n * @url https://github.com/esvit/ng-table/\r\n * @license New BSD License <http://creativecommons.org/licenses/BSD/>\r\n */\r\n\r\n\r\n\r\n/**\r\n * @ngdoc directive\r\n * @name ngTableDynamic\r\n * @module ngTable\r\n * @restrict A\r\n *\r\n * @description\r\n * A dynamic version of the {@link ngTable ngTable} directive that accepts a dynamic list of columns\r\n * definitions to render\r\n */\r\nngTableDynamic.$inject = [];\r\n\r\nfunction ngTableDynamic(){\r\n\r\n    return {\r\n        restrict: 'A',\r\n        priority: 1001,\r\n        scope: true,\r\n        controller: 'ngTableController',\r\n        compile: function(tElement) {\r\n            var row;\r\n\r\n            // IE 8 fix :not(.ng-table-group) selector\r\n            __WEBPACK_IMPORTED_MODULE_0_angular___default.a.forEach(tElement.find('tr'), function(tr) {\r\n                tr = __WEBPACK_IMPORTED_MODULE_0_angular___default.a.element(tr);\r\n                if (!tr.hasClass('ng-table-group') && !row) {\r\n                    row = tr;\r\n                }\r\n            });\r\n            if (!row) {\r\n                return;\r\n            }\r\n\r\n            __WEBPACK_IMPORTED_MODULE_0_angular___default.a.forEach(row.find('td'), function(item) {\r\n                var el = __WEBPACK_IMPORTED_MODULE_0_angular___default.a.element(item);\r\n                var getAttrValue = function(attr){\r\n                    return el.attr('x-data-' + attr) || el.attr('data-' + attr) || el.attr(attr);\r\n                };\r\n\r\n                // this used in responsive table\r\n                var titleExpr = getAttrValue('title');\r\n                if (!titleExpr){\r\n                    el.attr('data-title-text', '{{$columns[$index].titleAlt(this) || $columns[$index].title(this)}}');\r\n                }\r\n                var showExpr = el.attr('ng-if');\r\n                if (!showExpr){\r\n                    el.attr('ng-if', '$columns[$index].show(this)');\r\n                }\r\n            });\r\n            return function (scope, element, attrs, controller) {\r\n                var expr = controller.parseNgTableDynamicExpr(attrs.ngTableDynamic);\r\n\r\n                controller.setupBindingsToInternalScope(expr.tableParams);\r\n                controller.compileDirectiveTemplates();\r\n\r\n                scope.$watchCollection(expr.columns, function (newCols/*, oldCols*/) {\r\n                    scope.$columns = controller.buildColumns(newCols);\r\n                    controller.loadFilterData(scope.$columns);\r\n                });\r\n            };\r\n        }\r\n    };\r\n}\r\n\r\n\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_angular__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_angular___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_angular__);\n\n/* harmony export */ __webpack_require__.d(exports, \"a\", function() { return ngTableFilterConfigProvider; });/**\r\n * ngTable: Table + Angular JS\r\n *\r\n * @author Vitalii Savchuk <esvit666@gmail.com>\r\n * @url https://github.com/esvit/ng-table/\r\n * @license New BSD License <http://creativecommons.org/licenses/BSD/>\r\n */\r\n\r\n\r\n\r\nngTableFilterConfigProvider.$inject = [];\r\n\r\nfunction ngTableFilterConfigProvider(){\r\n    var config;\r\n    var defaultConfig = {\r\n        defaultBaseUrl: 'ng-table/filters/',\r\n        defaultExt: '.html',\r\n        aliasUrls: {}\r\n    };\r\n\r\n    this.$get = ngTableFilterConfig;\r\n    this.resetConfigs = resetConfigs;\r\n    this.setConfig = setConfig;\r\n\r\n    init();\r\n\r\n    /////////\r\n\r\n    function init(){\r\n        resetConfigs();\r\n    }\r\n\r\n    function resetConfigs(){\r\n        config = defaultConfig;\r\n    }\r\n\r\n    function setConfig(customConfig){\r\n        var mergeConfig = __WEBPACK_IMPORTED_MODULE_0_angular___default.a.extend({}, config, customConfig);\r\n        mergeConfig.aliasUrls = __WEBPACK_IMPORTED_MODULE_0_angular___default.a.extend({}, config.aliasUrls, customConfig.aliasUrls);\r\n        config = mergeConfig;\r\n    }\r\n\r\n    /////////\r\n\r\n    ngTableFilterConfig.$inject = [];\r\n\r\n    function ngTableFilterConfig(){\r\n\r\n        var publicConfig;\r\n\r\n        var service = {\r\n            config: publicConfig,\r\n            getTemplateUrl: getTemplateUrl,\r\n            getUrlForAlias: getUrlForAlias\r\n        };\r\n        Object.defineProperty(service, \"config\", {\r\n            get: function(){\r\n                return publicConfig = publicConfig || __WEBPACK_IMPORTED_MODULE_0_angular___default.a.copy(config);\r\n            },\r\n            enumerable: true\r\n        });\r\n\r\n        return service;\r\n\r\n        /////////\r\n\r\n        function getTemplateUrl(filterDef, filterKey){\r\n            if (__WEBPACK_IMPORTED_MODULE_0_angular___default.a.isObject(filterDef)){\r\n                filterDef = filterDef.id;\r\n            }\r\n            if (filterDef.indexOf('/') !== -1){\r\n                return filterDef;\r\n            }\r\n\r\n            return service.getUrlForAlias(filterDef, filterKey);\r\n        }\r\n\r\n        function getUrlForAlias(aliasName/*, filterKey*/){\r\n            return config.aliasUrls[aliasName] || config.defaultBaseUrl + aliasName + config.defaultExt;\r\n        }\r\n    }\r\n}\r\n\r\n\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__filterRow_html__ = __webpack_require__(4);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__filterRow_html___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__filterRow_html__);\n\n/* harmony export */ __webpack_require__.d(exports, \"a\", function() { return ngTableFilterRow; });/**\r\n * ngTable: Table + Angular JS\r\n *\r\n * @author Vitalii Savchuk <esvit666@gmail.com>\r\n * @url https://github.com/esvit/ng-table/\r\n * @license New BSD License <http://creativecommons.org/licenses/BSD/>\r\n */\r\n\r\n\r\n\r\nngTableFilterRow.$inject = [];\r\n\r\nfunction ngTableFilterRow(){\r\n    var directive = {\r\n        restrict: 'E',\r\n        replace: true,\r\n        templateUrl: __WEBPACK_IMPORTED_MODULE_0__filterRow_html___default.a,\r\n        scope: true,\r\n        controller: 'ngTableFilterRowController'\r\n    };\r\n    return directive;\r\n}\r\n\r\n\n\n/***/ },\n/* 20 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_angular__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_angular___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_angular__);\n\n/* harmony export */ __webpack_require__.d(exports, \"a\", function() { return ngTableFilterRowController; });/**\r\n * ngTable: Table + Angular JS\r\n *\r\n * @author Vitalii Savchuk <esvit666@gmail.com>\r\n * @url https://github.com/esvit/ng-table/\r\n * @license New BSD License <http://creativecommons.org/licenses/BSD/>\r\n */\r\n\r\n\r\n\r\nngTableFilterRowController.$inject = ['$scope', 'ngTableFilterConfig'];\r\n\r\nfunction ngTableFilterRowController($scope, ngTableFilterConfig){\r\n\r\n    $scope.config = ngTableFilterConfig;\r\n\r\n    $scope.getFilterCellCss = function (filter, layout){\r\n        if (layout !== 'horizontal') {\r\n            return 's12';\r\n        }\r\n\r\n        var size = Object.keys(filter).length;\r\n        var width = parseInt(12 / size, 10);\r\n        return 's' + width;\r\n    };\r\n\r\n    $scope.getFilterPlaceholderValue = function(filterValue/*, filterName*/){\r\n        if (__WEBPACK_IMPORTED_MODULE_0_angular___default.a.isObject(filterValue)) {\r\n            return filterValue.placeholder;\r\n        } else {\r\n            return '';\r\n        }\r\n    };\r\n}\r\n\r\n\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__groupRow_html__ = __webpack_require__(9);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__groupRow_html___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__groupRow_html__);\n\n/* harmony export */ __webpack_require__.d(exports, \"a\", function() { return ngTableGroupRow; });/**\r\n * ngTable: Table + Angular JS\r\n *\r\n * @author Vitalii Savchuk <esvit666@gmail.com>\r\n * @url https://github.com/esvit/ng-table/\r\n * @license New BSD License <http://creativecommons.org/licenses/BSD/>\r\n */\r\n\r\n\r\n\r\nngTableGroupRow.$inject = [];\r\n\r\nfunction ngTableGroupRow(){\r\n    var directive = {\r\n        restrict: 'E',\r\n        replace: true,\r\n        templateUrl: __WEBPACK_IMPORTED_MODULE_0__groupRow_html___default.a,\r\n        scope: true,\r\n        controller: 'ngTableGroupRowController',\r\n        controllerAs: 'dctrl'\r\n    };\r\n    return directive;\r\n}\r\n\r\n\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_angular__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_angular___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_angular__);\n\n/* harmony export */ __webpack_require__.d(exports, \"a\", function() { return ngTableGroupRowController; });/**\r\n * ngTable: Table + Angular JS\r\n *\r\n * @author Vitalii Savchuk <esvit666@gmail.com>\r\n * @url https://github.com/esvit/ng-table/\r\n * @license New BSD License <http://creativecommons.org/licenses/BSD/>\r\n */\r\n\r\n\r\n\r\n\r\nngTableGroupRowController.$inject = ['$scope'];\r\n\r\nfunction ngTableGroupRowController($scope){\r\n\r\n    var groupFns = [];\r\n\r\n    init();\r\n\r\n    function init(){\r\n        $scope.getGroupables = getGroupables;\r\n        $scope.getGroupTitle = getGroupTitle;\r\n        $scope.getVisibleColumns = getVisibleColumns;\r\n        $scope.groupBy = groupBy;\r\n        $scope.isSelectedGroup = isSelectedGroup;\r\n        $scope.toggleDetail = toggleDetail;\r\n\r\n        $scope.$watch('params.group()', setGroup, true);\r\n    }\r\n\r\n    function changeSortDirection(){\r\n      console.log(\"CSD\");\r\n        var newDirection;\r\n        if ($scope.params.hasGroup($scope.$selGroup, 'asc')) {\r\n            newDirection = 'desc';\r\n        } else if ($scope.params.hasGroup($scope.$selGroup, 'desc')){\r\n            newDirection = 'asc';\r\n        } else {\r\n            newDirection = 'asc';\r\n        }\r\n        $scope.params.group($scope.$selGroup, newDirection);\r\n    }\r\n\r\n    function findGroupColumn(groupKey) {\r\n        return $scope.$columns.filter(function ($column) {\r\n            return $column.groupable($scope) === groupKey;\r\n        })[0];\r\n    }\r\n\r\n    function getGroupTitle(group){\r\n        return __WEBPACK_IMPORTED_MODULE_0_angular___default.a.isFunction(group) ? group.title : group.title($scope);\r\n    }\r\n\r\n    function getGroupables(){\r\n        var groupableCols = $scope.$columns.filter(function ($column) {\r\n            return $column.groupable($scope);\r\n        });\r\n        return groupFns.concat(groupableCols);\r\n    }\r\n\r\n    function getVisibleColumns(){\r\n        return $scope.$columns.filter(function($column){\r\n            return $column.show($scope);\r\n        })\r\n    }\r\n\r\n    function groupBy(group){\r\n        console.log(\"CD\");\r\n        if (isSelectedGroup(group)){\r\n            changeSortDirection();\r\n        } else {          \r\n            if (group.groupable){\r\n                $scope.params.group(group.groupable($scope));\r\n            } else{\r\n                $scope.params.group(group);\r\n            }\r\n        }        \r\n    }\r\n\r\n    function isSelectedGroup(group){\r\n        if (group.groupable){\r\n            return group.groupable($scope) === $scope.$selGroup;\r\n        } else {\r\n            return group === $scope.$selGroup;\r\n        }\r\n    }\r\n\r\n    function setGroup(group){\r\n        var existingGroupCol = findGroupColumn($scope.$selGroup);\r\n        if (existingGroupCol && existingGroupCol.show.assign){\r\n            existingGroupCol.show.assign($scope, true);\r\n        }\r\n        if (__WEBPACK_IMPORTED_MODULE_0_angular___default.a.isFunction(group)) {\r\n            groupFns = [group];\r\n            $scope.$selGroup = group;\r\n            $scope.$selGroupTitle = group.title;\r\n        } else {\r\n            // note: currently only one group is implemented\r\n            var groupKey = Object.keys(group || {})[0];\r\n            var groupedColumn = findGroupColumn(groupKey);\r\n            if (groupedColumn) {\r\n                $scope.$selGroupTitle = groupedColumn.title($scope);\r\n                $scope.$selGroup = groupKey;\r\n                if (groupedColumn.show.assign) {\r\n                    groupedColumn.show.assign($scope, false);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function toggleDetail(){\r\n        $scope.params.settings().groupOptions.isExpanded = !$scope.params.settings().groupOptions.isExpanded;\r\n        return $scope.params.reload();\r\n    }\r\n}\r\n\r\n\n\n/***/ },\n/* 23 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_angular__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_angular___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_angular__);\n\n/* harmony export */ __webpack_require__.d(exports, \"a\", function() { return ngTablePagination; });/**\r\n * ngTable: Table + Angular JS\r\n *\r\n * @author Vitalii Savchuk <esvit666@gmail.com>\r\n * @url https://github.com/esvit/ng-table/\r\n * @license New BSD License <http://creativecommons.org/licenses/BSD/>\r\n */\r\n\r\n\r\n\r\n/**\r\n * @ngdoc directive\r\n * @name ngTablePagination\r\n * @module ngTable\r\n * @restrict A\r\n */\r\nngTablePagination.$inject = ['$compile', 'ngTableEventsChannel'];\r\n\r\nfunction ngTablePagination($compile, ngTableEventsChannel) {\r\n\r\n    return {\r\n        restrict: 'A',\r\n        scope: {\r\n            'params': '=ngTablePagination',\r\n            'templateUrl': '='\r\n        },\r\n        replace: false,\r\n        link: function(scope, element/*, attrs*/) {\r\n\r\n            ngTableEventsChannel.onAfterReloadData(function(pubParams) {\r\n                scope.pages = pubParams.generatePagesArray();\r\n            }, scope, function(pubParams){\r\n                return pubParams === scope.params;\r\n            });\r\n\r\n            scope.$watch('templateUrl', function(templateUrl) {\r\n                if (__WEBPACK_IMPORTED_MODULE_0_angular___default.a.isUndefined(templateUrl)) {\r\n                    return;\r\n                }\r\n                var template = __WEBPACK_IMPORTED_MODULE_0_angular___default.a.element(document.createElement('div'));\r\n                template.attr({\r\n                    'ng-include': 'templateUrl'\r\n                });\r\n                element.append(template);\r\n                $compile(template)(scope);\r\n            });\r\n        }\r\n    };\r\n}\r\n\r\n\n\n/***/ },\n/* 24 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_angular__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_angular___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_angular__);\n\n/* harmony export */ __webpack_require__.d(exports, \"a\", function() { return ngTableSelectFilterDs; });/**\r\n * ngTable: Table + Angular JS\r\n *\r\n * @author Vitalii Savchuk <esvit666@gmail.com>\r\n * @url https://github.com/esvit/ng-table/\r\n * @license New BSD License <http://creativecommons.org/licenses/BSD/>\r\n */\r\n\r\n\r\n\r\n/**\r\n * @ngdoc directive\r\n * @name ngTableSelectFilterDs\r\n * @module ngTable\r\n * @restrict A\r\n *\r\n * @description\r\n * Takes the array returned by $column.filterData and makes it available as `$selectData` on the `$scope`.\r\n *\r\n * The resulting `$selectData` array will contain an extra item that is suitable to represent the user\r\n * \"deselecting\" an item from a `<select>` tag\r\n *\r\n * This directive is is focused on providing a datasource to an `ngOptions` directive\r\n */\r\nngTableSelectFilterDs.$inject = [];\r\n\r\nfunction ngTableSelectFilterDs(){\r\n    // note: not using isolated or child scope \"by design\"\r\n    // this is to allow this directive to be combined with other directives that do\r\n\r\n    var directive = {\r\n        restrict: 'A',\r\n        controller: ngTableSelectFilterDsController\r\n    };\r\n    return directive;\r\n}\r\n\r\nngTableSelectFilterDsController.$inject = ['$scope', '$parse', '$attrs', '$q'];\r\nfunction ngTableSelectFilterDsController($scope, $parse, $attrs, $q){\r\n\r\n    var $column = {};\r\n    init();\r\n\r\n    function init(){\r\n        $column = $parse($attrs.ngTableSelectFilterDs)($scope);\r\n        $scope.$watch(function(){\r\n            return $column.data;\r\n        }, bindDataSource);\r\n    }\r\n\r\n    function bindDataSource(){\r\n        getSelectListData($column).then(function(data){\r\n            if (data && !hasEmptyOption(data)){\r\n                data.unshift({ id: '', title: ''});\r\n            }\r\n            data = data || [];\r\n            $scope.$selectData = data;\r\n        });\r\n    }\r\n\r\n    function hasEmptyOption(data) {\r\n        var isMatch;\r\n        for (var i = 0; i < data.length; i++) {\r\n            var item = data[i];\r\n            if (item && item.id === '') {\r\n                isMatch = true;\r\n                break;\r\n            }\r\n        }\r\n        return isMatch;\r\n    }\r\n\r\n    function getSelectListData($column) {\r\n        var data = __WEBPACK_IMPORTED_MODULE_0_angular___default.a.isFunction($column.data) ? $column.data() : $column.data;\r\n        return $q.when(data);\r\n    }\r\n}\r\n\r\n\n\n/***/ },\n/* 25 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__sorterRow_html__ = __webpack_require__(12);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__sorterRow_html___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__sorterRow_html__);\n\n/* harmony export */ __webpack_require__.d(exports, \"a\", function() { return ngTableSorterRow; });/**\r\n * ngTable: Table + Angular JS\r\n *\r\n * @author Vitalii Savchuk <esvit666@gmail.com>\r\n * @url https://github.com/esvit/ng-table/\r\n * @license New BSD License <http://creativecommons.org/licenses/BSD/>\r\n */\r\n\r\n\r\n\r\nngTableSorterRow.$inject = [];\r\n\r\nfunction ngTableSorterRow(){\r\n    var directive = {\r\n        restrict: 'E',\r\n        replace: true,\r\n        templateUrl: __WEBPACK_IMPORTED_MODULE_0__sorterRow_html___default.a,\r\n        scope: true,\r\n        controller: 'ngTableSorterRowController'\r\n    };\r\n    return directive;\r\n}\r\n\r\n\n\n/***/ },\n/* 26 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/* harmony export */ __webpack_require__.d(exports, \"a\", function() { return ngTableSorterRowController; });/**\r\n * ngTable: Table + Angular JS\r\n *\r\n * @author Vitalii Savchuk <esvit666@gmail.com>\r\n * @url https://github.com/esvit/ng-table/\r\n * @license New BSD License <http://creativecommons.org/licenses/BSD/>\r\n */\r\n\r\nngTableSorterRowController.$inject = ['$scope'];\r\n\r\nfunction ngTableSorterRowController($scope){\r\n\r\n    $scope.sortBy = sortBy;\r\n\r\n    ///////////\r\n\r\n    function sortBy($column, event) {\r\n        var parsedSortable = $column.sortable && $column.sortable();\r\n        if (!parsedSortable) {\r\n            return;\r\n        }\r\n        var defaultSort = $scope.params.settings().defaultSort;\r\n        var inverseSort = (defaultSort === 'asc' ? 'desc' : 'asc');\r\n        var sorting = $scope.params.sorting() && $scope.params.sorting()[parsedSortable] && ($scope.params.sorting()[parsedSortable] === defaultSort);\r\n        var sortingParams = (event.ctrlKey || event.metaKey) ? $scope.params.sorting() : {};\r\n        sortingParams[parsedSortable] = (sorting ? inverseSort : defaultSort);\r\n        $scope.params.parameters({\r\n            sorting: sortingParams\r\n        });\r\n    }\r\n}\r\n\r\n\n\n/***/ },\n/* 27 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_angular__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_angular___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_angular__);\n\n/* harmony export */ __webpack_require__.d(exports, \"a\", function() { return ngTableDefaultGetDataProvider; });/**\r\n * ngTable: Table + Angular JS\r\n *\r\n * @author Vitalii Savchuk <esvit666@gmail.com>\r\n * @url https://github.com/esvit/ng-table/\r\n * @license New BSD License <http://creativecommons.org/licenses/BSD/>\r\n */\r\n\r\n\r\n\r\nngTableDefaultGetDataProvider.$inject = [];\r\n\r\n/**\r\n * @ngdoc provider\r\n * @name ngTableDefaultGetDataProvider\r\n * @description Allows for the configuration of the ngTableDefaultGetData service.\r\n *\r\n * Set filterFilterName to the name of a angular filter that knows how to apply the values returned by\r\n * `NgTableParams.filter()` to restrict an array of data.\r\n *\r\n * Set sortingFilterName to the name of a angular filter that knows how to apply the values returned by\r\n * `NgTableParams.orderBy()` to sort an array of data.\r\n *\r\n * Out of the box the `ngTableDefaultGetData` service will be configured to use the angular `filter` and `orderBy`\r\n * filters respectively\r\n */\r\nfunction ngTableDefaultGetDataProvider(){\r\n    var provider = this;\r\n    provider.$get = ngTableDefaultGetData;\r\n    provider.filterFilterName = 'filter';\r\n    provider.sortingFilterName = 'orderBy';\r\n\r\n    ///////////\r\n\r\n    ngTableDefaultGetData.$inject = ['$filter'];\r\n\r\n    /**\r\n     * @ngdoc service\r\n     * @name ngTableDefaultGetData\r\n     * @description A default implementation of the getData function that will apply the `filter`, `orderBy` and\r\n     * paging values from the `NgTableParams` instance supplied to the data array supplied.\r\n     *\r\n     * The outcome will be to return the resulting array and to assign the total item count after filtering\r\n     * to the `total` of the `NgTableParams` instance supplied\r\n     */\r\n    function ngTableDefaultGetData($filter) {\r\n\r\n        var defaultDataOptions = {applyFilter: true, applySort: true, applyPaging: true};\r\n\r\n        getData.applyPaging = applyPaging;\r\n        getData.getFilterFn = getFilterFn;\r\n        getData.getOrderByFn = getOrderByFn;\r\n\r\n        return getData;\r\n\r\n        function getFilterFn(params) {\r\n            var filterOptions = params.settings().filterOptions;\r\n            if (__WEBPACK_IMPORTED_MODULE_0_angular___default.a.isFunction(filterOptions.filterFn)){\r\n                return filterOptions.filterFn;\r\n            } else {\r\n                return $filter(filterOptions.filterFilterName || provider.filterFilterName);\r\n            }\r\n        }\r\n\r\n        function getOrderByFn (/*params*/){            \r\n            return $filter(provider.sortingFilterName);\r\n        }\r\n\r\n        function applyFilter(data, params) {\r\n            if (!params.hasFilter()) {\r\n                return data;\r\n            }\r\n\r\n            var filter = params.filter(true);\r\n            var filterKeys = Object.keys(filter);\r\n            var parsedFilter = filterKeys.reduce(function(result, key){\r\n                result = setPath(result, filter[key], key);\r\n                return result;\r\n            }, {});\r\n            var filterFn = getFilterFn(params);\r\n            return filterFn.call(params, data, parsedFilter, params.settings().filterOptions.filterComparator);\r\n        }\r\n\r\n        function applyPaging(data, params) {\r\n            var pagedData = data.slice((params.page() - 1) * params.count(), params.page() * params.count());\r\n            params.total(data.length); // set total for recalc pagination\r\n            return pagedData;\r\n        }\r\n\r\n        function applySort(data, params) {\r\n            var orderBy = params.orderBy();\r\n            var orderByFn = getOrderByFn(params);  \r\n            console.log(orderBy,orderByFn);\r\n            return orderBy.length ? orderByFn(data, orderBy) : data;\r\n        }\r\n\r\n        function getData(data, params) {\r\n            if (data == null){\r\n                return [];\r\n            }\r\n\r\n            var options = __WEBPACK_IMPORTED_MODULE_0_angular___default.a.extend({}, defaultDataOptions, params.settings().dataOptions);\r\n\r\n            var fData = options.applyFilter ? applyFilter(data, params) : data;\r\n            var orderedData = options.applySort ? applySort(fData, params) : fData;\r\n            return options.applyPaging ? applyPaging(orderedData, params) : orderedData;\r\n        }\r\n\r\n        // Sets the value at any depth in a nested object based on the path\r\n        // note: adapted from: underscore-contrib#setPath\r\n        function setPath(obj, value, path) {\r\n            var keys     = path.split('.');\r\n            var ret      = obj;\r\n            var lastKey  = keys[keys.length -1];\r\n            var target   = ret;\r\n\r\n            var parentPathKeys = keys.slice(0, keys.length -1);\r\n            parentPathKeys.forEach(function(key) {\r\n                if (!target.hasOwnProperty(key)) {\r\n                    target[key] = {};\r\n                }\r\n                target = target[key];\r\n            });\r\n\r\n            target[lastKey] = value;\r\n            return ret;\r\n        }\r\n    }\r\n}\r\n\r\n\n\n/***/ },\n/* 28 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/* harmony export */ __webpack_require__.d(exports, \"a\", function() { return ngTableDefaults; });/**\r\n * ngTable: Table + Angular JS\r\n *\r\n * @author Vitalii Savchuk <esvit666@gmail.com>\r\n * @url https://github.com/esvit/ng-table/\r\n * @license New BSD License <http://creativecommons.org/licenses/BSD/>\r\n */\r\n\r\n/**\r\n * @ngdoc object\r\n * @name ngTableDefaultParams\r\n * @module ngTable\r\n * @description Default Parameters for ngTable\r\n */\r\nvar ngTableDefaults = {\r\n    params: {},\r\n    settings: {}\r\n};\r\n\r\n\n\n/***/ },\n/* 29 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_angular__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_angular___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_angular__);\n\n/* harmony export */ __webpack_require__.d(exports, \"a\", function() { return ngTableEventsChannel; });/**\r\n * ngTable: Table + Angular JS\r\n *\r\n * @author Vitalii Savchuk <esvit666@gmail.com>\r\n * @url https://github.com/esvit/ng-table/\r\n * @license New BSD License <http://creativecommons.org/licenses/BSD/>\r\n */\r\n\r\n\r\n\r\nngTableEventsChannel.$inject = ['$rootScope'];\r\n\r\n/**\r\n * @ngdoc service\r\n * @name ngTableEventsChannel\r\n * @description strongly typed pub/sub for `NgTableParams`\r\n *\r\n * Supported events:\r\n *\r\n * * afterCreated - raised when a new instance of `NgTableParams` has finished being constructed\r\n * * afterReloadData - raised when the `reload` event has finished loading new data\r\n * * datasetChanged - raised when `settings` receives a new data array\r\n * * pagesChanged - raised when a new pages array has been generated\r\n */\r\nfunction ngTableEventsChannel($rootScope){\r\n\r\n    var events = {};\r\n    events = addChangeEvent('afterCreated', events);\r\n    events = addChangeEvent('afterReloadData', events);\r\n    events = addChangeEvent('datasetChanged', events);\r\n    events = addChangeEvent('pagesChanged', events);\r\n    return events;\r\n\r\n    //////////\r\n\r\n    function addChangeEvent(eventName, target){\r\n        var fnName = eventName.charAt(0).toUpperCase() + eventName.substring(1);\r\n        var event = {};\r\n        event['on' + fnName] = createEventSubscriptionFn(eventName);\r\n        event['publish' + fnName] = createPublishEventFn(eventName);\r\n        return __WEBPACK_IMPORTED_MODULE_0_angular___default.a.extend(target, event);\r\n    }\r\n\r\n    function createEventSubscriptionFn(eventName){\r\n\r\n        return function subscription(handler/*[, eventSelector or $scope][, eventSelector]*/){\r\n            var eventSelector = __WEBPACK_IMPORTED_MODULE_0_angular___default.a.identity;\r\n            var scope = $rootScope;\r\n\r\n            if (arguments.length === 2){\r\n                if (__WEBPACK_IMPORTED_MODULE_0_angular___default.a.isFunction(arguments[1].$new)) {\r\n                    scope = arguments[1];\r\n                } else {\r\n                    eventSelector = arguments[1]\r\n                }\r\n            } else if (arguments.length > 2){\r\n                scope = arguments[1];\r\n                eventSelector = arguments[2];\r\n            }\r\n\r\n            // shorthand for subscriber to only receive events from a specific publisher instance\r\n            if (__WEBPACK_IMPORTED_MODULE_0_angular___default.a.isObject(eventSelector)) {\r\n                var requiredPublisher = eventSelector;\r\n                eventSelector = function(publisher){\r\n                    return publisher === requiredPublisher;\r\n                }\r\n            }\r\n\r\n            return scope.$on('ngTable:' + eventName, function(event, params/*, ...args*/){\r\n                // don't send events published by the internal NgTableParams created by ngTableController\r\n                if (params.isNullInstance) return;\r\n\r\n                var eventArgs = rest(arguments, 2);\r\n                var fnArgs = [params].concat(eventArgs);\r\n                if (eventSelector.apply(this, fnArgs)){\r\n                    handler.apply(this, fnArgs);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    function createPublishEventFn(eventName){\r\n        return function publish(/*args*/){\r\n            var fnArgs = ['ngTable:' + eventName].concat(Array.prototype.slice.call(arguments));\r\n            $rootScope.$broadcast.apply($rootScope, fnArgs);\r\n        }\r\n    }\r\n\r\n    function rest(array, n) {\r\n        return Array.prototype.slice.call(array, n == null ? 1 : n);\r\n    }\r\n}\r\n\r\n\n\n/***/ },\n/* 30 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_angular__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_angular___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_angular__);\n\n/* harmony export */ __webpack_require__.d(exports, \"a\", function() { return ngTableParamsFactory; });/**\r\n * ngTable: Table + Angular JS\r\n *\r\n * @author Vitalii Savchuk <esvit666@gmail.com>\r\n * @url https://github.com/esvit/ng-table/\r\n * @license New BSD License <http://creativecommons.org/licenses/BSD/>\r\n */\r\n\r\n\r\n\r\n/**\r\n * @ngdoc service\r\n * @name NgTableParams\r\n * @module ngTable\r\n * @description Parameters manager for ngTable\r\n */\r\nngTableParamsFactory.$inject = ['$q', '$log', '$filter', 'ngTableDefaults', 'ngTableDefaultGetData', 'ngTableEventsChannel'];\r\n\r\nfunction ngTableParamsFactory($q, $log, $filter, ngTableDefaults, ngTableDefaultGetData, ngTableEventsChannel) {\r\n\r\n    return NgTableParams;\r\n    \r\n    function NgTableParams(baseParameters, baseSettings) {\r\n\r\n        function isNumber(n) {\r\n            return !isNaN(parseFloat(n)) && isFinite(n);\r\n        }\r\n\r\n        // the ngTableController \"needs\" to create a dummy/null instance and it's important to know whether an instance\r\n        // is one of these\r\n        if (typeof baseParameters === \"boolean\"){\r\n            this.isNullInstance = true;\r\n        }\r\n\r\n        var self = this,\r\n            prevParamsMemento,\r\n            errParamsMemento,\r\n            isCommittedDataset = false,\r\n            initialEvents = [],\r\n            log = function() {\r\n                if (settings.debugMode && $log.debug) {\r\n                    $log.debug.apply($log, arguments);\r\n                }\r\n            },\r\n            defaultFilterOptions = {\r\n                filterComparator: undefined, // look for a substring match in case insensitive way\r\n                filterDelay: 500,\r\n                filterDelayThreshold: 10000, // size of dataset array that will trigger the filterDelay being applied\r\n                filterFilterName: undefined, // when defined overrides ngTableDefaultGetDataProvider.filterFilterName\r\n                filterFn: undefined, // when defined overrides the filter function that ngTableDefaultGetData uses\r\n                filterLayout: 'stack' // alternative: 'horizontal'\r\n            },\r\n            defaultGroupOptions = {\r\n                defaultSort: 'asc', // set to 'asc' or 'desc' to apply sorting to groups\r\n                isExpanded: true,\r\n                sortGroups: true\r\n            },\r\n            defaultSettingsFns = getDefaultSettingFns();\r\n\r\n        this.data = [];\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name NgTableParams#parameters\r\n         * @description Set new parameters or get current parameters\r\n         *\r\n         * @param {string} newParameters      New parameters\r\n         * @param {string} parseParamsFromUrl Flag if parse parameters like in url\r\n         * @returns {Object} Current parameters or `this`\r\n         */\r\n        this.parameters = function(newParameters, parseParamsFromUrl) {\r\n            parseParamsFromUrl = parseParamsFromUrl || false;\r\n            if (__WEBPACK_IMPORTED_MODULE_0_angular___default.a.isDefined(newParameters)) {\r\n                for (var key in newParameters) {\r\n                    var value = newParameters[key];\r\n                    if (parseParamsFromUrl && key.indexOf('[') >= 0) {\r\n                        var keys = key.split(/\\[(.*)\\]/).reverse()\r\n                        var lastKey = '';\r\n                        for (var i = 0, len = keys.length; i < len; i++) {\r\n                            var name = keys[i];\r\n                            if (name !== '') {\r\n                                var v = value;\r\n                                value = {};\r\n                                value[lastKey = name] = (isNumber(v) ? parseFloat(v) : v);\r\n                            }\r\n                        }\r\n                        if (lastKey === 'sorting') {\r\n                            params[lastKey] = {};\r\n                        }\r\n                        params[lastKey] = __WEBPACK_IMPORTED_MODULE_0_angular___default.a.extend(params[lastKey] || {}, value[lastKey]);\r\n                    } else {\r\n                        if (key === 'group'){\r\n                            params[key] = parseGroup(newParameters[key]);\r\n                        } else {\r\n                            params[key] = (isNumber(newParameters[key]) ? parseFloat(newParameters[key]) : newParameters[key]);\r\n                        }\r\n                    }\r\n                }\r\n                log('ngTable: set parameters', params);\r\n                return this;\r\n            }\r\n            return params;\r\n        };\r\n\r\n        function parseGroup(group){\r\n            var defaultSort = settings.groupOptions && settings.groupOptions.defaultSort;\r\n            if (__WEBPACK_IMPORTED_MODULE_0_angular___default.a.isFunction(group)) {\r\n                if (group.sortDirection == null){\r\n                    group.sortDirection = defaultSort;\r\n                }\r\n                return group;\r\n            } else if (__WEBPACK_IMPORTED_MODULE_0_angular___default.a.isString(group)) {\r\n                var grp = {};\r\n                grp[group] = defaultSort;\r\n                return grp;\r\n            } else if (__WEBPACK_IMPORTED_MODULE_0_angular___default.a.isObject(group)) {\r\n                for (var key in group) {\r\n                    if (group[key] == null){\r\n                        group[key] = defaultSort;\r\n                    }\r\n                }\r\n                return group;\r\n            } else {\r\n                return group;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name NgTableParams#settings\r\n         * @description Set new settings for table\r\n         *\r\n         * @param {string} newSettings New settings or undefined\r\n         * @returns {Object} Current settings or `this`\r\n         */\r\n        this.settings = function(newSettings) {\r\n            if (__WEBPACK_IMPORTED_MODULE_0_angular___default.a.isDefined(newSettings)) {\r\n\r\n                // todo: don't modify newSettings object: this introduces unexpected side effects;\r\n                // instead take a copy of newSettings\r\n\r\n                if (newSettings.filterOptions){\r\n                    newSettings.filterOptions = __WEBPACK_IMPORTED_MODULE_0_angular___default.a.extend({}, settings.filterOptions, newSettings.filterOptions);\r\n                }\r\n                if (newSettings.groupOptions){\r\n                    newSettings.groupOptions = __WEBPACK_IMPORTED_MODULE_0_angular___default.a.extend({}, settings.groupOptions, newSettings.groupOptions);\r\n                }\r\n\r\n                if (__WEBPACK_IMPORTED_MODULE_0_angular___default.a.isArray(newSettings.dataset)) {\r\n                    //auto-set the total from passed in dataset\r\n                    newSettings.total = newSettings.dataset.length;\r\n                }\r\n\r\n                var originalDataset = settings.dataset;\r\n                settings = __WEBPACK_IMPORTED_MODULE_0_angular___default.a.extend(settings, newSettings);\r\n\r\n                if (__WEBPACK_IMPORTED_MODULE_0_angular___default.a.isArray(newSettings.dataset)) {\r\n                    optimizeFilterDelay();\r\n                }\r\n\r\n                // note: using != as want null and undefined to be treated the same\r\n                var hasDatasetChanged = newSettings.hasOwnProperty('dataset') && (newSettings.dataset != originalDataset);\r\n                if (hasDatasetChanged) {\r\n                    if (isCommittedDataset){\r\n                        this.page(1); // reset page as a new dataset has been supplied\r\n                    }\r\n                    isCommittedDataset = false;\r\n\r\n                    var fireEvent = function () {\r\n                        ngTableEventsChannel.publishDatasetChanged(self, newSettings.dataset, originalDataset);\r\n                    };\r\n\r\n                    if (initialEvents){\r\n                        initialEvents.push(fireEvent);\r\n                    } else {\r\n                        fireEvent();\r\n                    }\r\n                }\r\n                log('ngTable: set settings', settings);\r\n                return this;\r\n            }\r\n            return settings;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name NgTableParams#page\r\n         * @description If parameter page not set return current page else set current page\r\n         *\r\n         * @param {string} page Page number\r\n         * @returns {Object|Number} Current page or `this`\r\n         */\r\n        this.page = function(page) {\r\n            return __WEBPACK_IMPORTED_MODULE_0_angular___default.a.isDefined(page) ? this.parameters({\r\n                'page': page\r\n            }) : params.page;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name NgTableParams#total\r\n         * @description If parameter total not set return current quantity else set quantity\r\n         *\r\n         * @param {string} total Total quantity of items\r\n         * @returns {Object|Number} Current page or `this`\r\n         */\r\n        this.total = function(total) {\r\n            return __WEBPACK_IMPORTED_MODULE_0_angular___default.a.isDefined(total) ? this.settings({\r\n                'total': total\r\n            }) : settings.total;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name NgTableParams#count\r\n         * @description If parameter count not set return current count per page else set count per page\r\n         *\r\n         * @param {string} count Count per number\r\n         * @returns {Object|Number} Count per page or `this`\r\n         */\r\n        this.count = function(count) {\r\n            // reset to first page because can be blank page\r\n            return __WEBPACK_IMPORTED_MODULE_0_angular___default.a.isDefined(count) ? this.parameters({\r\n                'count': count,\r\n                'page': 1\r\n            }) : params.count;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name NgTableParams#filter\r\n         * @description If 'filter' parameter not set return current filter else set current filter\r\n         *\r\n         * Note: when assigning a new filter, {@link NgTableParams#page page} will be set to 1\r\n         *\r\n         * @param {Object|Boolean} filter 'object': new filter to assign or\r\n         * 'true': to return the current filter minus any insignificant values (null,  undefined and empty string); or\r\n         * 'falsey': to return the current filter \"as is\"\r\n         * @returns {Object} Current filter or `this`\r\n         */\r\n        this.filter = function(filter) {\r\n            if (__WEBPACK_IMPORTED_MODULE_0_angular___default.a.isDefined(filter) && __WEBPACK_IMPORTED_MODULE_0_angular___default.a.isObject(filter)) {\r\n                return this.parameters({\r\n                    'filter': filter,\r\n                    'page': 1\r\n                });\r\n            } else if (filter === true){\r\n                var keys = Object.keys(params.filter);\r\n                var significantFilter = {};\r\n                for (var i=0; i < keys.length; i++){\r\n                    var filterValue = params.filter[keys[i]];\r\n                    if (filterValue != null && filterValue !== '') {\r\n                        significantFilter[keys[i]] = filterValue;\r\n                    }\r\n                }\r\n                return significantFilter;\r\n            } else {\r\n                return params.filter;\r\n            }\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name NgTableParams#group\r\n         * @description If 'group' parameter is not set, return current grouping. Otherwise set current group.\r\n         *\r\n         * @param {string|Function|Object} group New group field\r\n         * @param {string} sortDirection Optional direction that the list of groups should be sorted\r\n         * @returns {Object} Current grouping or `this`\r\n         */\r\n        this.group = function(group, sortDirection) {\r\n            if (!__WEBPACK_IMPORTED_MODULE_0_angular___default.a.isDefined(group)){\r\n                return params.group;\r\n            }\r\n\r\n            var newParameters = {\r\n                page: 1\r\n            };\r\n            if (__WEBPACK_IMPORTED_MODULE_0_angular___default.a.isFunction(group) && __WEBPACK_IMPORTED_MODULE_0_angular___default.a.isDefined(sortDirection)){\r\n                group.sortDirection = sortDirection;\r\n                newParameters.group = group;\r\n            } else if (__WEBPACK_IMPORTED_MODULE_0_angular___default.a.isDefined(group) && __WEBPACK_IMPORTED_MODULE_0_angular___default.a.isDefined(sortDirection)) {\r\n                var groupArray = {};\r\n                groupArray[group] = sortDirection;\r\n                newParameters.group = groupArray;\r\n            } else {\r\n                newParameters.group = group;\r\n            }\r\n            this.parameters(newParameters);\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name NgTableParams#sorting\r\n         * @description If 'sorting' parameter is not set, return current sorting. Otherwise set current sorting.\r\n         *\r\n         * @param {string} sorting New sorting\r\n         * @returns {Object} Current sorting or `this`\r\n         */\r\n        this.sorting = function(sorting) {\r\n            if (arguments.length == 2) {\r\n                var sortArray = {};\r\n                sortArray[sorting] = arguments[1];\r\n                this.parameters({\r\n                    'sorting': sortArray\r\n                });\r\n                return this;\r\n            }\r\n            return __WEBPACK_IMPORTED_MODULE_0_angular___default.a.isDefined(sorting) ? this.parameters({\r\n                'sorting': sorting\r\n            }) : params.sorting;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name NgTableParams#isSortBy\r\n         * @description Checks sort field\r\n         *\r\n         * @param {string} field     Field name\r\n         * @param {string} direction Optional direction of sorting ('asc' or 'desc')\r\n         * @returns {Array} Return true if field sorted by direction\r\n         */\r\n        this.isSortBy = function(field, direction) {\r\n            if(direction !== undefined) {\r\n                return __WEBPACK_IMPORTED_MODULE_0_angular___default.a.isDefined(params.sorting[field]) && params.sorting[field] == direction;\r\n            } else {\r\n                return __WEBPACK_IMPORTED_MODULE_0_angular___default.a.isDefined(params.sorting[field]);\r\n            }\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name NgTableParams#orderBy\r\n         * @description Return object of sorting parameters for angular filter\r\n         *\r\n         * @returns {Array} Array like: [ '-name', '+age' ]\r\n         */\r\n        this.orderBy = function() {\r\n            return convertSortToOrderBy(params.sorting);\r\n        };\r\n\r\n        function convertSortToOrderBy(sorting){\r\n            var result = [];\r\n            for (var column in sorting) {\r\n                result.push((sorting[column] === \"asc\" ? \"+\" : \"-\") + column);\r\n            }\r\n            return result;\r\n        }\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name NgTableParams#generatePagesArray\r\n         * @description Generate array of pages\r\n         *\r\n         * When no arguments supplied, the current parameter state of this `NgTableParams` instance will be used\r\n         *\r\n         * @param {boolean} currentPage which page must be active\r\n         * @param {boolean} totalItems  Total quantity of items\r\n         * @param {boolean} pageSize    Quantity of items on page\r\n         * @param {number} maxBlocks    Quantity of blocks for pagination\r\n         * @returns {Array} Array of pages\r\n         */\r\n        this.generatePagesArray = function(currentPage, totalItems, pageSize, maxBlocks) {\r\n            if (!arguments.length){\r\n                currentPage = this.page();\r\n                totalItems = this.total();\r\n                pageSize = this.count();\r\n            }\r\n\r\n            var maxPage, maxPivotPages, minPage, numPages, pages;\r\n            maxBlocks = maxBlocks && maxBlocks < 6 ? 6 : maxBlocks;\r\n\r\n            pages = [];\r\n            numPages = Math.ceil(totalItems / pageSize);\r\n            if (numPages > 1) {\r\n                pages.push({\r\n                    type: 'prev',\r\n                    number: Math.max(1, currentPage - 1),\r\n                    active: currentPage > 1\r\n                });\r\n                pages.push({\r\n                    type: 'first',\r\n                    number: 1,\r\n                    active: currentPage > 1,\r\n                    current: currentPage === 1\r\n                });\r\n                maxPivotPages = Math.round((settings.paginationMaxBlocks - settings.paginationMinBlocks) / 2);\r\n                minPage = Math.max(2, currentPage - maxPivotPages);\r\n                maxPage = Math.min(numPages - 1, currentPage + maxPivotPages * 2 - (currentPage - minPage));\r\n                minPage = Math.max(2, minPage - (maxPivotPages * 2 - (maxPage - minPage)));\r\n                var i = minPage;\r\n                while (i <= maxPage) {\r\n                    if ((i === minPage && i !== 2) || (i === maxPage && i !== numPages - 1)) {\r\n                        pages.push({\r\n                            type: 'more',\r\n                            active: false\r\n                        });\r\n                    } else {\r\n                        pages.push({\r\n                            type: 'page',\r\n                            number: i,\r\n                            active: currentPage !== i,\r\n                            current: currentPage === i\r\n                        });\r\n                    }\r\n                    i++;\r\n                }\r\n                pages.push({\r\n                    type: 'last',\r\n                    number: numPages,\r\n                    active: currentPage !== numPages,\r\n                    current: currentPage === numPages\r\n                });\r\n                pages.push({\r\n                    type: 'next',\r\n                    number: Math.min(numPages, currentPage + 1),\r\n                    active: currentPage < numPages\r\n                });\r\n            }\r\n            return pages;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name NgTableParams#isDataReloadRequired\r\n         * @description Return true when a change to this `NgTableParams` instance should require the reload method\r\n         * to be run so as to ensure the data presented to the user reflects the `NgTableParams`\r\n         *\r\n         * Note that this method will return false when the reload method has run but fails. In this case\r\n         * `hasErrorState` will return true.\r\n         */\r\n        this.isDataReloadRequired = function(){\r\n            // note: using != as want to treat null and undefined the same\r\n            return !isCommittedDataset || !__WEBPACK_IMPORTED_MODULE_0_angular___default.a.equals(createComparableParams(), prevParamsMemento)\r\n                || hasGlobalSearchFieldChanges();\r\n        };\r\n\r\n        function createComparableParams(){\r\n            var result = {params: params};\r\n            if (__WEBPACK_IMPORTED_MODULE_0_angular___default.a.isFunction(params.group)){\r\n                result.groupSortDirection = params.group.sortDirection;\r\n            }\r\n            return result\r\n        }\r\n        /**\r\n         * @ngdoc method\r\n         * @name NgTableParams#hasFilter\r\n         * @description Determines if NgTableParams#filter has significant filter value(s)\r\n         * (any value except null, undefined, or empty string)\r\n         * @returns {Boolean} true when NgTableParams#filter has at least one significant field value\r\n         */\r\n        this.hasFilter = function(){\r\n            return Object.keys(this.filter(true)).length > 0;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name NgTableParams#hasGroup\r\n         * @description Determines if at least one group has been set\r\n         * @returns {Boolean}\r\n         */\r\n        this.hasGroup = function(group, sortDirection){\r\n            if (group == null) {\r\n                return __WEBPACK_IMPORTED_MODULE_0_angular___default.a.isFunction(params.group) || Object.keys(params.group).length > 0\r\n            }\r\n\r\n            if (__WEBPACK_IMPORTED_MODULE_0_angular___default.a.isFunction(group)) {\r\n                if (sortDirection == null) {\r\n                    return params.group === group;\r\n                } else {\r\n                    return params.group === group && group.sortDirection === sortDirection;\r\n                }\r\n            } else {\r\n                if (sortDirection == null) {\r\n                    return Object.keys(params.group).indexOf(group) !== -1;\r\n                } else {\r\n                    return params.group[group] === sortDirection;\r\n                }\r\n            }\r\n        };\r\n        \r\n        this.hasGroupHeader = function(){\r\n          return __WEBPACK_IMPORTED_MODULE_0_angular___default.a.isFunction(params.showGroupHeader)?params.showGroupHeader():params.showGroupHeader;          \r\n        }\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name NgTableParams#hasFilterChanges\r\n         * @description Return true when a change to `NgTableParams.filters`require the reload method\r\n         * to be run so as to ensure the data presented to the user reflects these filters\r\n         */\r\n        this.hasFilterChanges = function(){\r\n            var previousFilter = (prevParamsMemento && prevParamsMemento.params.filter);\r\n            return !__WEBPACK_IMPORTED_MODULE_0_angular___default.a.equals((params.filter), previousFilter) || hasGlobalSearchFieldChanges();\r\n        };\r\n\r\n        function hasGlobalSearchFieldChanges(){\r\n            var currentVal = (params.filter && params.filter.$);\r\n            var previousVal =\r\n                (prevParamsMemento && prevParamsMemento.params.filter && prevParamsMemento.params.filter.$);\r\n            return !__WEBPACK_IMPORTED_MODULE_0_angular___default.a.equals(currentVal, previousVal);\r\n        }\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name NgTableParams#url\r\n         * @description Return groups for table grouping\r\n         *\r\n         * @param {boolean} asString flag indicates return array of string or object\r\n         * @returns {Array} If asString = true will be return array of url string parameters else key-value object\r\n         */\r\n        this.url = function(asString) {\r\n            asString = asString || false;\r\n            var pairs = (asString ? [] : {});\r\n            for (var key in params) {\r\n                if (params.hasOwnProperty(key)) {\r\n                    var item = params[key],\r\n                        name = encodeURIComponent(key);\r\n                    if (typeof item === \"object\") {\r\n                        for (var subkey in item) {\r\n                            if (isSignificantValue(item[subkey], key)) {\r\n                                var pname = name + \"[\" + encodeURIComponent(subkey) + \"]\";\r\n                                collectValue(item[subkey], pname);\r\n                            }\r\n                        }\r\n                    } else if (!__WEBPACK_IMPORTED_MODULE_0_angular___default.a.isFunction(item) && isSignificantValue(item, key)) {\r\n                        collectValue(item, name);\r\n                    }\r\n                }\r\n            }\r\n            return pairs;\r\n\r\n            function collectValue(value, key){\r\n                if (asString) {\r\n                    pairs.push(key + \"=\" + encodeURIComponent(value));\r\n                } else {\r\n                    pairs[key] = encodeURIComponent(value);\r\n                }\r\n            }\r\n\r\n            function isSignificantValue(value, key){\r\n                return key === \"group\" ? true : __WEBPACK_IMPORTED_MODULE_0_angular___default.a.isDefined(value) && value !== \"\";\r\n            }\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name NgTableParams#reload\r\n         * @description Reload table data\r\n         */\r\n        this.reload = function() {\r\n            var self = this,\r\n                pData = null;\r\n\r\n            settings.$loading = true;\r\n\r\n            prevParamsMemento = __WEBPACK_IMPORTED_MODULE_0_angular___default.a.copy(createComparableParams());\r\n            isCommittedDataset = true;\r\n\r\n            if (self.hasGroup()) {\r\n                pData = runInterceptorPipeline($q.when(settings.getGroups(self)));\r\n            } else {\r\n                pData = runInterceptorPipeline($q.when(settings.getData(self)));\r\n            }\r\n\r\n            log('ngTable: reload data');\r\n\r\n            var oldData = self.data;\r\n            return pData.then(function(data) {\r\n                settings.$loading = false;\r\n                errParamsMemento = null;\r\n\r\n                self.data = data;\r\n                // note: I think it makes sense to publish this event even when data === oldData\r\n                // subscribers can always set a filter to only receive the event when data !== oldData\r\n                ngTableEventsChannel.publishAfterReloadData(self, data, oldData);\r\n                self.reloadPages();\r\n\r\n                return data;\r\n            }).catch(function(reason){\r\n                errParamsMemento = prevParamsMemento;\r\n                // \"rethrow\"\r\n                return $q.reject(reason);\r\n            });\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name NgTableParams#hasErrorState\r\n         * @description Return true when an attempt to `reload` the current `parameter` values have resulted in\r\n         * a failure\r\n         *\r\n         * This method will continue to return true until the reload is successfully called or when the\r\n         * `parameter` values have changed\r\n         */\r\n        this.hasErrorState = function(){\r\n            return !!(errParamsMemento && __WEBPACK_IMPORTED_MODULE_0_angular___default.a.equals(errParamsMemento, createComparableParams()));\r\n        };\r\n\r\n        function optimizeFilterDelay(){\r\n            // don't debounce by default filter input when working with small synchronous datasets\r\n            if (settings.filterOptions.filterDelay === defaultFilterOptions.filterDelay &&\r\n                settings.total <= settings.filterOptions.filterDelayThreshold &&\r\n                settings.getData === defaultSettingsFns.getData){\r\n                settings.filterOptions.filterDelay = 0;\r\n            }\r\n        }\r\n\r\n        this.reloadPages = (function() {\r\n            var currentPages;\r\n            return function(){\r\n                var oldPages = currentPages;\r\n                var newPages = self.generatePagesArray(self.page(), self.total(), self.count());\r\n                if (!__WEBPACK_IMPORTED_MODULE_0_angular___default.a.equals(oldPages, newPages)){\r\n                    currentPages = newPages;\r\n                    ngTableEventsChannel.publishPagesChanged(this, newPages, oldPages);\r\n                }\r\n            }\r\n        })();\r\n\r\n        function runInterceptorPipeline(fetchedData){\r\n            var interceptors = settings.interceptors || [];\r\n\r\n            return interceptors.reduce(function(result, interceptor){\r\n                var thenFn = (interceptor.response && interceptor.response.bind(interceptor)) || $q.when;\r\n                var rejectFn = (interceptor.responseError && interceptor.responseError.bind(interceptor)) || $q.reject;\r\n                return result.then(function(data){\r\n                    return thenFn(data, self);\r\n                }, function(reason){\r\n                    return rejectFn(reason, self);\r\n                });\r\n            }, fetchedData);\r\n        }\r\n\r\n        function getDefaultSettingFns(){\r\n\r\n            return {\r\n                getData: getData,\r\n                getGroups: getGroups\r\n            };\r\n\r\n            /**\r\n             * @ngdoc method\r\n             * @name settings#getData\r\n             * @description Returns the data to display in the table\r\n             *\r\n             * Called by `NgTableParams` whenever it considers new data is to be loaded\r\n             *\r\n             * @param {Object} params the `NgTableParams` requesting data\r\n             */\r\n            function getData(params) {\r\n                return ngTableDefaultGetData(params.settings().dataset, params);\r\n            }\r\n\r\n            /**\r\n             * @ngdoc method\r\n             * @name settings#getGroups\r\n             * @description Return groups of data to display in the table\r\n             *\r\n             * Called by `NgTableParams` whenever it considers new data is to be loaded\r\n             * and when a `group` value has been assigned\r\n             *\r\n             * @param {Object} params the `NgTableParams` requesting data\r\n             */\r\n            function getGroups(params) {\r\n\r\n                var group = params.group();\r\n                var groupFn;\r\n                var sortDirection = undefined;\r\n                if (__WEBPACK_IMPORTED_MODULE_0_angular___default.a.isFunction(group)) {\r\n                    groupFn = group;\r\n                    sortDirection = group.sortDirection;\r\n                } else {\r\n                    // currently support for only one group implemented\r\n                    var groupField = Object.keys(group)[0];\r\n                    sortDirection = group[groupField];\r\n                    groupFn = function(item){\r\n                        return getPath(item, groupField);\r\n                    };\r\n                }\r\n                \r\n                var settings = params.settings();\r\n                var originalDataOptions = settings.dataOptions;\r\n                settings.dataOptions = { applyPaging: false };\r\n                var gotData = $q.when(settings.getData(params));\r\n                return gotData.then(function(data) {\r\n                    var groups = {};\r\n                    __WEBPACK_IMPORTED_MODULE_0_angular___default.a.forEach(data, function(item) {\r\n                        var groupName = groupFn(item);\r\n                        groups[groupName] = groups[groupName] || {\r\n                                data: [],\r\n                                $hideRows: !settings.groupOptions.isExpanded,\r\n                                value: groupName\r\n                            };\r\n                        groups[groupName].data.push(item);\r\n                    });\r\n                    var result = [];\r\n                    for (var i in groups) {\r\n                        result.push(groups[i]);\r\n                    }\r\n                    if (group.sortGroups && sortDirection) {\r\n                        var orderByFn = ngTableDefaultGetData.getOrderByFn();\r\n                        var orderBy = convertSortToOrderBy({\r\n                            value: sortDirection\r\n                        });\r\n                        result = orderByFn(result, orderBy);\r\n                    }\r\n\r\n                    return ngTableDefaultGetData.applyPaging(result, params);\r\n                }).finally(function(){\r\n                    // restore the real options\r\n                    settings.dataOptions = originalDataOptions;\r\n                });\r\n            }\r\n\r\n            function getPath (obj, ks) {\r\n                // origianl source https://github.com/documentcloud/underscore-contrib\r\n\r\n                if (typeof ks == \"string\") ks = ks.split(\".\");\r\n\r\n                // If we have reached an undefined property\r\n                // then stop executing and return undefined\r\n                if (obj === undefined) return void 0;\r\n\r\n                // If the path array has no more elements, we've reached\r\n                // the intended property and return its value\r\n                if (ks.length === 0) return obj;\r\n\r\n                // If we still have elements in the path array and the current\r\n                // value is null, stop executing and return undefined\r\n                if (obj === null) return void 0;\r\n\r\n                return getPath(obj[ks[0]], ks.slice(1));\r\n            }\r\n        }\r\n\r\n        var params = {\r\n            page: 1,\r\n            count: 10,\r\n            filter: {},\r\n            sorting: {},\r\n            group: {}\r\n        };\r\n        __WEBPACK_IMPORTED_MODULE_0_angular___default.a.extend(params, ngTableDefaults.params);\r\n\r\n        /**\r\n         * @ngdoc object\r\n         * @name settings\r\n         * @module ngTable\r\n         * @description configuration settings for `NgTableParams`\r\n         */\r\n        var settings = {\r\n            $loading: false,\r\n            dataset: null, //allows data to be set when table is initialized\r\n            total: 0,\r\n            defaultSort: 'desc',\r\n            filterOptions: __WEBPACK_IMPORTED_MODULE_0_angular___default.a.copy(defaultFilterOptions),\r\n            groupOptions: __WEBPACK_IMPORTED_MODULE_0_angular___default.a.copy(defaultGroupOptions),\r\n            counts: [10, 25, 50, 100],\r\n            interceptors: [],\r\n            paginationMaxBlocks: 11,\r\n            paginationMinBlocks: 5,\r\n            sortingIndicator: 'span'\r\n        };\r\n\r\n        this.settings(defaultSettingsFns);\r\n        this.settings(ngTableDefaults.settings);\r\n        this.settings(baseSettings);\r\n        this.parameters(baseParameters, true);\r\n\r\n        ngTableEventsChannel.publishAfterCreated(this);\r\n        // run events during construction after the initial create event. That way a consumer\r\n        // can subscribe to all events for a table without \"dropping\" an event\r\n        __WEBPACK_IMPORTED_MODULE_0_angular___default.a.forEach(initialEvents, function(event){\r\n            event();\r\n        });\r\n        initialEvents = null;\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\n\n\n/***/ },\n/* 31 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_angular__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_angular___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_angular__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__src_core__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__src_browser__ = __webpack_require__(2);\n\n/* harmony export */ __webpack_require__.d(exports, \"default\", function() { return module; });\r\n\r\n\r\n\r\nvar module = __WEBPACK_IMPORTED_MODULE_0_angular___default.a.module('ngTable', [__WEBPACK_IMPORTED_MODULE_1__src_core__[\"a\" /* default */].name, __WEBPACK_IMPORTED_MODULE_2__src_browser__[\"a\" /* default */].name]);\r\n\r\n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n// WEBPACK FOOTER //\n// ng-table.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmory imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmory exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tObject.defineProperty(exports, name, {\n \t\t\tconfigurable: false,\n \t\t\tenumerable: true,\n \t\t\tget: getter\n \t\t});\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 31);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap f1c7c80fba1e3b44ae0e","module.exports = __WEBPACK_EXTERNAL_MODULE_0__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"angular\"\n// module id = 0\n// module chunks = 0","import angular from 'angular';\r\nimport { ngTable } from './ngTable.directive';\r\nimport { ngTableColumn } from './ngTableColumn';\r\nimport { ngTableColumnsBinding } from './ngTableColumnsBinding.directive';\r\nimport { ngTableController } from './ngTableController';\r\nimport { ngTableDynamic } from './ngTableDynamic.directive';\r\nimport { ngTableFilterConfigProvider } from './ngTableFilterConfig';\r\nimport { ngTableFilterRow } from './ngTableFilterRow.directive';\r\nimport { ngTableFilterRowController } from './ngTableFilterRowController';\r\nimport { ngTableGroupRow } from './ngTableGroupRow.directive';\r\nimport { ngTableGroupRowController } from './ngTableGroupRowController';\r\nimport { ngTablePagination } from './ngTablePagination.directive';\r\nimport { ngTableSelectFilterDs } from './ngTableSelectFilterDs.directive';\r\nimport { ngTableSorterRow } from './ngTableSorterRow.directive';\r\nimport { ngTableSorterRowController } from './ngTableSorterRowController';\r\nimport './filters/number.html';\r\nimport './filters/select.html';\r\nimport './filters/select-multiple.html';\r\nimport './filters/text.html';\r\nimport './pager.html';\r\nimport './header.html';\r\n\r\nvar module = angular.module('ngTable-browser', [])\r\n    .directive('ngTable', ngTable)\r\n    .factory('ngTableColumn', ngTableColumn)\r\n    .directive('ngTableColumnsBinding', ngTableColumnsBinding)\r\n    .controller('ngTableController', ngTableController)\r\n    .directive('ngTableDynamic', ngTableDynamic)\r\n    .provider('ngTableFilterConfig', ngTableFilterConfigProvider)\r\n    .directive('ngTableFilterRow', ngTableFilterRow)\r\n    .controller('ngTableFilterRowController', ngTableFilterRowController)\r\n    .directive('ngTableGroupRow', ngTableGroupRow)\r\n    .controller('ngTableGroupRowController', ngTableGroupRowController)\r\n    .directive('ngTablePagination', ngTablePagination)\r\n    .directive('ngTableSelectFilterDs', ngTableSelectFilterDs)\r\n    .directive('ngTableSorterRow', ngTableSorterRow)\r\n    .controller('ngTableSorterRowController', ngTableSorterRowController);\r\n\r\nexport { module as default };\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/browser/index.js\n// module id = 2\n// module chunks = 0","import angular from 'angular';\r\nimport { ngTableDefaultGetDataProvider } from './ngTableDefaultGetData';\r\nimport { ngTableDefaults } from './ngTableDefaults';\r\nimport { ngTableParamsFactory } from './ngTableParams';\r\nimport { ngTableEventsChannel } from './ngTableEventsChannel';\r\n\r\nvar module = angular.module('ngTable-core', [])\r\n    .provider('ngTableDefaultGetData', ngTableDefaultGetDataProvider)\r\n    .value('ngTableDefaults',ngTableDefaults)\r\n    .factory('NgTableParams', ngTableParamsFactory)\r\n    .factory('ngTableEventsChannel', ngTableEventsChannel);\r\n\r\nexport { module as default };\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/core/index.js\n// module id = 3\n// module chunks = 0","var path = 'ng-table/filterRow.html';\nvar html = \"<tr ng-show=show_filter class=ng-table-filters> <th data-title-text=\\\"{{$column.titleAlt(this) || $column.title(this)}}\\\" ng-repeat=\\\"$column in $columns\\\" ng-if=$column.show(this) class=\\\"filter {{$column.class(this)}}\\\" ng-class=\\\"params.settings().filterOptions.filterLayout === 'horizontal' ? 'filter-horizontal' : ''\\\"> <div ng-repeat=\\\"(name, filter) in $column.filter(this)\\\" ng-include=config.getTemplateUrl(filter) class=filter-cell ng-class=\\\"[getFilterCellCss($column.filter(this), params.settings().filterOptions.filterLayout), $last ? 'last' : '']\\\"> </div> </th> </tr>\";\nvar angular = require('angular');\nangular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\nmodule.exports = path;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/browser/filterRow.html\n// module id = 4\n// module chunks = 0","var path = 'ng-table/filters/number.html';\nvar html = \"<input type=number name={{name}} ng-disabled=$filterRow.disabled ng-model=params.filter()[name] class=\\\"input-filter form-control\\\" placeholder=\\\"{{getFilterPlaceholderValue(filter, name)}}\\\"/>\";\nvar angular = require('angular');\nangular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\nmodule.exports = path;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/browser/filters/number.html\n// module id = 5\n// module chunks = 0","var path = 'ng-table/filters/select-multiple.html';\nvar html = \"<select ng-options=\\\"data.id as data.title for data in $column.data\\\" ng-disabled=$filterRow.disabled multiple=multiple ng-multiple=true ng-model=params.filter()[name] class=\\\"filter filter-select-multiple form-control\\\" name={{name}}> </select>\";\nvar angular = require('angular');\nangular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\nmodule.exports = path;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/browser/filters/select-multiple.html\n// module id = 6\n// module chunks = 0","var path = 'ng-table/filters/select.html';\nvar html = \"<select ng-options=\\\"data.id as data.title for data in $selectData\\\" ng-table-select-filter-ds=$column ng-disabled=$filterRow.disabled ng-model=params.filter()[name] class=\\\"filter filter-select form-control\\\" name={{name}}> <option style=display:none value=\\\"\\\"></option> </select>\";\nvar angular = require('angular');\nangular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\nmodule.exports = path;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/browser/filters/select.html\n// module id = 7\n// module chunks = 0","var path = 'ng-table/filters/text.html';\nvar html = \"<input type=text name={{name}} ng-disabled=$filterRow.disabled ng-model=params.filter()[name] class=\\\"input-filter form-control\\\" placeholder=\\\"{{getFilterPlaceholderValue(filter, name)}}\\\"/>\";\nvar angular = require('angular');\nangular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\nmodule.exports = path;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/browser/filters/text.html\n// module id = 8\n// module chunks = 0","var path = 'ng-table/groupRow.html';\nvar html = \"<tr ng-if=\\\"params.hasGroup() && params.hasGroupHeader()\\\" ng-show=$groupRow.show class=ng-table-group-header> <th colspan={{getVisibleColumns().length}} class=sortable ng-class=\\\"{\\r\\n                    'sort-asc': params.hasGroup($selGroup, 'asc'),\\r\\n                    'sort-desc':params.hasGroup($selGroup, 'desc')\\r\\n                  }\\\"> <a href=\\\"\\\" ng-click=\\\"isSelectorOpen = !isSelectorOpen\\\" class=ng-table-group-selector> <strong class=sort-indicator>{{$selGroupTitle}}</strong> <button class=\\\"btn btn-default btn-xs ng-table-group-close\\\" ng-click=\\\"$groupRow.show = false; $event.preventDefault(); $event.stopPropagation();\\\"> <span class=\\\"glyphicon glyphicon-remove\\\"></span> </button> <button class=\\\"btn btn-default btn-xs ng-table-group-toggle\\\" ng-click=\\\"toggleDetail(); $event.preventDefault(); $event.stopPropagation();\\\"> <span class=glyphicon ng-class=\\\"{\\r\\n                    'glyphicon-resize-small': params.settings().groupOptions.isExpanded,\\r\\n                    'glyphicon-resize-full': !params.settings().groupOptions.isExpanded\\r\\n                }\\\"></span> </button> </a> <div class=list-group ng-if=isSelectorOpen> <a href=\\\"\\\" class=list-group-item ng-repeat=\\\"group in getGroupables()\\\" ng-click=groupBy(group)> <strong>{{ getGroupTitle(group)}}</strong> <strong ng-class=\\\"isSelectedGroup(group) && 'sort-indicator'\\\"></strong> </a> </div> </th> </tr>\";\nvar angular = require('angular');\nangular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\nmodule.exports = path;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/browser/groupRow.html\n// module id = 9\n// module chunks = 0","var path = 'ng-table/header.html';\nvar html = \"<ng-table-group-row></ng-table-group-row> <ng-table-sorter-row></ng-table-sorter-row> <ng-table-filter-row></ng-table-filter-row>\";\nvar angular = require('angular');\nangular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\nmodule.exports = path;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/browser/header.html\n// module id = 10\n// module chunks = 0","var path = 'ng-table/pager.html';\nvar html = \"<div class=\\\"ng-cloak ng-table-pager\\\" ng-if=params.data.length> <div ng-if=params.settings().counts.length class=\\\"ng-table-counts btn-group pull-right\\\"> <button ng-repeat=\\\"count in params.settings().counts\\\" type=button ng-class=\\\"{'active':params.count() == count}\\\" ng-click=params.count(count) class=\\\"btn btn-default\\\"> <span ng-bind=count></span> </button> </div> <ul ng-if=pages.length class=\\\"pagination ng-table-pagination\\\"> <li ng-class=\\\"{'disabled': !page.active && !page.current, 'active': page.current}\\\" ng-repeat=\\\"page in pages\\\" ng-switch=page.type> <a ng-switch-when=prev ng-click=params.page(page.number) href=\\\"\\\">&laquo;</a> <a ng-switch-when=first ng-click=params.page(page.number) href=\\\"\\\"><span ng-bind=page.number></span></a> <a ng-switch-when=page ng-click=params.page(page.number) href=\\\"\\\"><span ng-bind=page.number></span></a> <a ng-switch-when=more ng-click=params.page(page.number) href=\\\"\\\">&#8230;</a> <a ng-switch-when=last ng-click=params.page(page.number) href=\\\"\\\"><span ng-bind=page.number></span></a> <a ng-switch-when=next ng-click=params.page(page.number) href=\\\"\\\">&raquo;</a> </li> </ul> </div>\";\nvar angular = require('angular');\nangular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\nmodule.exports = path;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/browser/pager.html\n// module id = 11\n// module chunks = 0","var path = 'ng-table/sorterRow.html';\nvar html = \"<tr class=ng-table-sort-header> <th title={{$column.headerTitle(this)}} ng-repeat=\\\"$column in $columns\\\" ng-class=\\\"{\\r\\n                    'sortable': $column.sortable(this),\\r\\n                    'sort-asc': params.sorting()[$column.sortable(this)]=='asc',\\r\\n                    'sort-desc': params.sorting()[$column.sortable(this)]=='desc'\\r\\n                  }\\\" ng-click=\\\"sortBy($column, $event)\\\" ng-if=$column.show(this) ng-init=\\\"template = $column.headerTemplateURL(this)\\\" class=\\\"header {{$column.class(this)}}\\\"> <div ng-if=!template class=ng-table-header ng-class=\\\"{'sort-indicator': params.settings().sortingIndicator == 'div'}\\\"> <span ng-bind=$column.title(this) ng-class=\\\"{'sort-indicator': params.settings().sortingIndicator == 'span'}\\\"></span> </div> <div ng-if=template ng-include=template></div> </th> </tr>\";\nvar angular = require('angular');\nangular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\nmodule.exports = path;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/browser/sorterRow.html\n// module id = 12\n// module chunks = 0","/**\r\n * ngTable: Table + Angular JS\r\n *\r\n * @author Vitalii Savchuk <esvit666@gmail.com>\r\n * @url https://github.com/esvit/ng-table/\r\n * @license New BSD License <http://creativecommons.org/licenses/BSD/>\r\n */\r\nimport angular from 'angular';\r\n    \r\n/**\r\n * @ngdoc directive\r\n * @name ngTable\r\n * @module ngTable\r\n * @restrict A\r\n *\r\n * @description\r\n * Directive that instantiates {@link ngTableController ngTableController}.\r\n */\r\nngTable.$inject = ['$q', '$parse'];\r\n\r\nfunction ngTable($q, $parse) {\r\n\r\n    return {\r\n        restrict: 'A',\r\n        priority: 1001,\r\n        scope: true,\r\n        controller: 'ngTableController',\r\n        compile: function(element) {\r\n            var columns = [],\r\n                i = 0,\r\n                dataRow,\r\n                groupRow,\r\n                rows = [];\r\n\r\n            angular.forEach(element.find('tr'), function(tr) {\r\n                rows.push(angular.element(tr))\r\n            });\r\n            dataRow = rows.filter(function(tr){\r\n                return !tr.hasClass('ng-table-group');\r\n            })[0];\r\n            groupRow = rows.filter(function(tr){\r\n                return tr.hasClass('ng-table-group');\r\n            })[0];\r\n\r\n            if (!dataRow) {\r\n                return;\r\n            }\r\n            angular.forEach(dataRow.find('td'), function(item) {\r\n                var el = angular.element(item);\r\n                if (el.attr('ignore-cell') && 'true' === el.attr('ignore-cell')) {\r\n                    return;\r\n                }\r\n\r\n                var getAttrValue = function(attr){\r\n                    return el.attr('x-data-' + attr) || el.attr('data-' + attr) || el.attr(attr);\r\n                };\r\n                var setAttrValue = function(attr, value){\r\n                    if (el.attr('x-data-' + attr)){\r\n                        el.attr('x-data-' + attr, value)\r\n                    } else if (el.attr('data' + attr)){\r\n                        el.attr('data' + attr, value)\r\n                    } else {\r\n                        el.attr(attr, value)\r\n                    }\r\n                };\r\n\r\n                var parsedAttribute = function(attr) {\r\n                    var expr = getAttrValue(attr);\r\n                    if (!expr){\r\n                        return undefined;\r\n                    }\r\n\r\n                    var localValue;\r\n                    var getter = function (context) {\r\n                        if (localValue !== undefined){\r\n                            return localValue;\r\n                        }\r\n                        return $parse(expr)(context);\r\n                    };\r\n                    getter.assign = function($scope, value){\r\n                        var parsedExpr = $parse(expr);\r\n                        if (parsedExpr.assign) {\r\n                            // we should be writing back to the parent scope as this is where the expression\r\n                            // came from\r\n                            parsedExpr.assign($scope.$parent, value);\r\n                        } else {\r\n                            localValue = value;\r\n                        }\r\n                    };\r\n                    return getter;\r\n                };\r\n                var titleExpr = getAttrValue('title-alt') || getAttrValue('title');\r\n                if (titleExpr){\r\n                    el.attr('data-title-text', '{{' + titleExpr + '}}'); // this used in responsive table\r\n                }\r\n                // NOTE TO MAINTAINERS: if you add extra fields to a $column be sure to extend ngTableColumn with\r\n                // a corresponding \"safe\" default\r\n                columns.push({\r\n                    id: i++,\r\n                    title: parsedAttribute('title'),\r\n                    titleAlt: parsedAttribute('title-alt'),\r\n                    headerTitle: parsedAttribute('header-title'),\r\n                    sortable: parsedAttribute('sortable'),\r\n                    'class': parsedAttribute('header-class'),\r\n                    filter: parsedAttribute('filter'),\r\n                    groupable: parsedAttribute('groupable'),\r\n                    headerTemplateURL: parsedAttribute('header'),\r\n                    filterData: parsedAttribute('filter-data'),\r\n                    show: el.attr(\"ng-if\") ? parsedAttribute('ng-if') : undefined\r\n                });\r\n\r\n                if (groupRow || el.attr(\"ng-if\")){\r\n                    // change ng-if to bind to our column definition which we know will be writable\r\n                    // because this will potentially increase the $watch count, only do so if we already have an\r\n                    // ng-if or when we definitely need to change visibility of the columns.\r\n                    // currently only ngTableGroupRow directive needs to change visibility\r\n                    setAttrValue('ng-if', '$columns[' + (columns.length - 1) + '].show(this)');\r\n                }\r\n            });\r\n            return function(scope, element, attrs, controller) {\r\n                scope.$columns = columns = controller.buildColumns(columns);\r\n\r\n                controller.setupBindingsToInternalScope(attrs.ngTable);\r\n                controller.loadFilterData(columns);\r\n                controller.compileDirectiveTemplates();\r\n            };\r\n        }\r\n    }\r\n}\r\n\r\nexport { ngTable };\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/browser/ngTable.directive.js\n// module id = 13\n// module chunks = 0","/**\r\n * ngTable: Table + Angular JS\r\n *\r\n * @author Vitalii Savchuk <esvit666@gmail.com>\r\n * @url https://github.com/esvit/ng-table/\r\n * @license New BSD License <http://creativecommons.org/licenses/BSD/>\r\n */\r\n\r\nimport angular from 'angular';\r\n\r\n/**\r\n * @ngdoc service\r\n * @name ngTableColumn\r\n * @module ngTable\r\n * @description\r\n * Service to construct a $column definition used by {@link ngTable ngTable} directive\r\n */\r\nngTableColumn.$inject = [];\r\n\r\nfunction ngTableColumn() {\r\n\r\n    return {\r\n        buildColumn: buildColumn\r\n    };\r\n\r\n    //////////////\r\n\r\n    /**\r\n     * @ngdoc method\r\n     * @name ngTableColumn#buildColumn\r\n     * @description Creates a $column for use within a header template\r\n     *\r\n     * @param {Object} column an existing $column or simple column data object\r\n     * @param {Scope} defaultScope the $scope to supply to the $column getter methods when not supplied by caller\r\n     * @param {Array} columns a reference to the columns array to make available on the context supplied to the\r\n     * $column getter methods\r\n     * @returns {Object} a $column object\r\n     */\r\n    function buildColumn(column, defaultScope, columns){\r\n        // note: we're not modifying the original column object. This helps to avoid unintended side affects\r\n        var extendedCol = Object.create(column);\r\n        var defaults = createDefaults();\r\n        for (var prop in defaults) {\r\n            if (extendedCol[prop] === undefined) {\r\n                extendedCol[prop] = defaults[prop];\r\n            }\r\n            if(!angular.isFunction(extendedCol[prop])){\r\n                // wrap raw field values with \"getter\" functions\r\n                // - this is to ensure consistency with how ngTable.compile builds columns\r\n                // - note that the original column object is being \"proxied\"; this is important\r\n                //   as it ensure that any changes to the original object will be returned by the \"getter\"\r\n                (function(prop1){\r\n                    var getterSetter = function getterSetter(/*[value] || [$scope, locals]*/) {\r\n                        if (arguments.length === 1 && !isScopeLike(arguments[0])) {\r\n                            getterSetter.assign(null, arguments[0]);\r\n                        } else {\r\n                            return column[prop1];\r\n                        }\r\n                    };\r\n                    getterSetter.assign = function($scope, value){\r\n                        column[prop1] = value;\r\n                    };\r\n                    extendedCol[prop1] = getterSetter;\r\n                })(prop);\r\n            }\r\n            (function(prop1){\r\n                // satisfy the arguments expected by the function returned by parsedAttribute in the ngTable directive\r\n                var getterFn = extendedCol[prop1];\r\n                extendedCol[prop1] = function () {\r\n                    if (arguments.length === 1 && !isScopeLike(arguments[0])){\r\n                        getterFn.assign(null, arguments[0]);\r\n                    } else {\r\n                        var scope = arguments[0] || defaultScope;\r\n                        var context = Object.create(scope);\r\n                        angular.extend(context, {\r\n                            $column: extendedCol,\r\n                            $columns: columns\r\n                        });\r\n                        return getterFn.call(column, context);\r\n                    }\r\n                };\r\n                if (getterFn.assign){\r\n                    extendedCol[prop1].assign = getterFn.assign;\r\n                }\r\n            })(prop);\r\n        }\r\n        return extendedCol;\r\n    }\r\n\r\n    function createDefaults(){\r\n        return {\r\n            'class': createGetterSetter(''),\r\n            filter: createGetterSetter(false),\r\n            groupable: createGetterSetter(false),\r\n            filterData: angular.noop,\r\n            headerTemplateURL: createGetterSetter(false),\r\n            headerTitle: createGetterSetter(''),\r\n            sortable: createGetterSetter(false),\r\n            show: createGetterSetter(true),\r\n            title: createGetterSetter(''),\r\n            titleAlt: createGetterSetter('')\r\n        };\r\n    }\r\n\r\n    function createGetterSetter(initialValue){\r\n        var value = initialValue;\r\n        var getterSetter = function getterSetter(/*[value] || [$scope, locals]*/){\r\n            if (arguments.length === 1 && !isScopeLike(arguments[0])) {\r\n                getterSetter.assign(null, arguments[0]);\r\n            } else {\r\n                return value;\r\n            }\r\n        };\r\n        getterSetter.assign = function($scope, newValue){\r\n            value = newValue;\r\n        };\r\n        return getterSetter;\r\n    }\r\n\r\n    function isScopeLike(object){\r\n        return object != null && angular.isFunction(object.$new);\r\n    }\r\n}\r\n\r\nexport { ngTableColumn };\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/browser/ngTableColumn.js\n// module id = 14\n// module chunks = 0","/**\r\n * ngTable: Table + Angular JS\r\n *\r\n * @author Vitalii Savchuk <esvit666@gmail.com>\r\n * @url https://github.com/esvit/ng-table/\r\n * @license New BSD License <http://creativecommons.org/licenses/BSD/>\r\n */\r\n\r\nngTableColumnsBinding.$inject = [\"$parse\"];\r\n\r\n/**\r\n * @ngdoc directive\r\n * @name ngTableColumnsBinding\r\n * @description One-way data binds the $columns array generated by ngTable/ngTableDynamic to the specified\r\n * expression.\r\n *\r\n * This allows the $columns array to be accessed outside of the html table markup\r\n */\r\nfunction ngTableColumnsBinding($parse){\r\n    var directive = {\r\n        restrict: 'A',\r\n        require: 'ngTable',\r\n        link: linkFn\r\n    };\r\n    return directive;\r\n\r\n    function linkFn($scope, $element, $attrs){\r\n        var setter = $parse($attrs.ngTableColumnsBinding).assign;\r\n        if (setter){\r\n            $scope.$watch('$columns', function(newColumns){\r\n                var shallowClone = (newColumns || []).slice(0);\r\n                setter($scope, shallowClone);\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport { ngTableColumnsBinding };\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/browser/ngTableColumnsBinding.directive.js\n// module id = 15\n// module chunks = 0","/**\r\n * ngTable: Table + Angular JS\r\n *\r\n * @author Vitalii Savchuk <esvit666@gmail.com>\r\n * @url https://github.com/esvit/ng-table/\r\n * @license New BSD License <http://creativecommons.org/licenses/BSD/>\r\n */\r\n\r\nimport angular from 'angular';\r\n\r\n/**\r\n * @ngdoc object\r\n * @name ngTableController\r\n *\r\n * @description\r\n * Each {@link ngTable ngTable} directive creates an instance of `ngTableController`\r\n */\r\nngTableController.$inject = [\r\n    '$scope', 'NgTableParams', '$timeout', '$parse', '$compile', '$attrs', '$element', 'ngTableColumn', 'ngTableEventsChannel'\r\n];\r\n\r\nfunction ngTableController($scope, NgTableParams, $timeout, $parse, $compile, $attrs, $element, ngTableColumn, ngTableEventsChannel) {\r\n    var isFirstTimeLoad = true;\r\n    $scope.$filterRow = {};\r\n    $scope.$loading = false;\r\n\r\n    // until such times as the directive uses an isolated scope, we need to ensure that the check for\r\n    // the params field only consults the \"own properties\" of the $scope. This is to avoid seeing the params\r\n    // field on a $scope higher up in the prototype chain\r\n    if (!$scope.hasOwnProperty(\"params\")) {\r\n        $scope.params = new NgTableParams(true);\r\n    }\r\n    $scope.params.settings().$scope = $scope;\r\n\r\n    var delayFilter = (function() {\r\n        var timer = 0;\r\n        return function(callback, ms) {\r\n            $timeout.cancel(timer);\r\n            timer = $timeout(callback, ms);\r\n        };\r\n    })();\r\n\r\n    function onDataReloadStatusChange (newStatus/*, oldStatus*/) {\r\n        if (!newStatus || $scope.params.hasErrorState()) {\r\n            return;\r\n        }\r\n\r\n        $scope.params.settings().$scope = $scope;\r\n\r\n        var currentParams = $scope.params;\r\n        var filterOptions = currentParams.settings().filterOptions;\r\n\r\n        if (currentParams.hasFilterChanges()) {\r\n            var applyFilter = function () {\r\n                currentParams.page(1);\r\n                currentParams.reload();\r\n            };\r\n            if (filterOptions.filterDelay) {\r\n                delayFilter(applyFilter, filterOptions.filterDelay);\r\n            } else {\r\n                applyFilter();\r\n            }\r\n        } else {\r\n            currentParams.reload();\r\n        }\r\n    }\r\n\r\n    // watch for when a new NgTableParams is bound to the scope\r\n    // CRITICAL: the watch must be for reference and NOT value equality; this is because NgTableParams maintains\r\n    // the current data page as a field. Checking this for value equality would be terrible for performance\r\n    // and potentially cause an error if the items in that array has circular references\r\n    $scope.$watch('params', function(newParams, oldParams){\r\n        if (newParams === oldParams || !newParams) {\r\n            return;\r\n        }\r\n\r\n        newParams.reload();\r\n    }, false);\r\n\r\n    $scope.$watch('params.isDataReloadRequired()', onDataReloadStatusChange);\r\n\r\n    this.compileDirectiveTemplates = function () {\r\n        if (!$element.hasClass('ng-table')) {\r\n            $scope.templates = {\r\n                header: ($attrs.templateHeader ? $attrs.templateHeader : 'ng-table/header.html'),\r\n                pagination: ($attrs.templatePagination ? $attrs.templatePagination : 'ng-table/pager.html')\r\n            };\r\n            $element.addClass('ng-table');\r\n            var headerTemplate = null;\r\n\r\n            // $element.find('> thead').length === 0 doesn't work on jqlite\r\n            var theadFound = false;\r\n            angular.forEach($element.children(), function(e) {\r\n                if (e.tagName === 'THEAD') {\r\n                    theadFound = true;\r\n                }\r\n            });\r\n            if (!theadFound) {\r\n                headerTemplate = angular.element(document.createElement('thead')).attr('ng-include', 'templates.header');\r\n                $element.prepend(headerTemplate);\r\n            }\r\n            var paginationTemplate = angular.element(document.createElement('div')).attr({\r\n                'ng-table-pagination': 'params',\r\n                'template-url': 'templates.pagination'\r\n            });\r\n            $element.after(paginationTemplate);\r\n            if (headerTemplate) {\r\n                $compile(headerTemplate)($scope);\r\n            }\r\n            $compile(paginationTemplate)($scope);\r\n        }\r\n    };\r\n\r\n    this.loadFilterData = function ($columns) {\r\n        angular.forEach($columns, function ($column) {\r\n            var result;\r\n            result = $column.filterData($scope);\r\n            if (!result) {\r\n                delete $column.filterData;\r\n                return;\r\n            }\r\n\r\n            // if we're working with a deferred object or a promise, let's wait for the promise\r\n            /* WARNING: support for returning a $defer is depreciated */\r\n            if ((angular.isObject(result) && (angular.isObject(result.promise) || angular.isFunction(result.then)))) {\r\n                var pData = angular.isFunction(result.then) ? result : result.promise;\r\n                delete $column.filterData;\r\n                return pData.then(function(data) {\r\n                    // our deferred can eventually return arrays, functions and objects\r\n                    if (!angular.isArray(data) && !angular.isFunction(data) && !angular.isObject(data)) {\r\n                        // if none of the above was found - we just want an empty array\r\n                        data = [];\r\n                    }\r\n                    $column.data = data;\r\n                });\r\n            }\r\n            // otherwise, we just return what the user gave us. It could be a function, array, object, whatever\r\n            else {\r\n                return $column.data = result;\r\n            }\r\n        });\r\n    };\r\n\r\n    this.buildColumns = function (columns) {\r\n        var result = [];\r\n        (columns || []).forEach(function(col){\r\n            result.push(ngTableColumn.buildColumn(col, $scope, result));\r\n        });\r\n        return result\r\n    };\r\n\r\n    this.parseNgTableDynamicExpr = function (attr) {\r\n        if (!attr || attr.indexOf(\" with \") > -1) {\r\n            var parts = attr.split(/\\s+with\\s+/);\r\n            return {\r\n                tableParams: parts[0],\r\n                columns: parts[1]\r\n            };\r\n        } else {\r\n            throw new Error('Parse error (expected example: ng-table-dynamic=\\'tableParams with cols\\')');\r\n        }\r\n    };\r\n\r\n    this.setupBindingsToInternalScope = function(tableParamsExpr){\r\n\r\n        // note: this we're setting up watches to simulate angular's isolated scope bindings\r\n\r\n        // note: is REALLY important to watch for a change to the ngTableParams *reference* rather than\r\n        // $watch for value equivalence. This is because ngTableParams references the current page of data as\r\n        // a field and it's important not to watch this\r\n        var tableParamsGetter = $parse(tableParamsExpr);\r\n        $scope.$watch(tableParamsGetter, (function (params) {\r\n            if (angular.isUndefined(params)) {\r\n                return;\r\n            }\r\n            $scope.paramsModel = tableParamsGetter;\r\n            $scope.params = params;\r\n        }), false);\r\n\r\n        setupFilterRowBindingsToInternalScope();\r\n        setupGroupRowBindingsToInternalScope();\r\n    };\r\n\r\n    function setupFilterRowBindingsToInternalScope(){\r\n        if ($attrs.showFilter) {\r\n            $scope.$parent.$watch($attrs.showFilter, function(value) {\r\n                $scope.show_filter = value;\r\n            });\r\n        } else {\r\n            $scope.$watch(hasVisibleFilterColumn, function(value){\r\n                $scope.show_filter = value;\r\n            })\r\n        }\r\n\r\n        if ($attrs.disableFilter) {\r\n            $scope.$parent.$watch($attrs.disableFilter, function(value) {\r\n                $scope.$filterRow.disabled = value;\r\n            });\r\n        }\r\n    }\r\n\r\n    function setupGroupRowBindingsToInternalScope(){\r\n        $scope.$groupRow = {};\r\n        if ($attrs.showGroup) {\r\n            var showGroupGetter = $parse($attrs.showGroup);\r\n            $scope.$parent.$watch(showGroupGetter, function(value) {\r\n                $scope.$groupRow.show = value;\r\n            });\r\n            if (showGroupGetter.assign){\r\n                // setup two-way databinding thus allowing ngTableGrowRow to assign to the showGroup expression\r\n                $scope.$watch('$groupRow.show', function(value) {\r\n                    showGroupGetter.assign($scope.$parent, value);\r\n                });\r\n            }\r\n        } else{\r\n            $scope.$watch('params.hasGroup()', function(newValue) {\r\n                $scope.$groupRow.show = newValue;\r\n            });\r\n        }\r\n    }\r\n\r\n    function getVisibleColumns(){\r\n        return ($scope.$columns || []).filter(function(c){\r\n            return c.show($scope);\r\n        });\r\n    }\r\n\r\n    function hasVisibleFilterColumn(){\r\n        if (!$scope.$columns) return false;\r\n\r\n        return some($scope.$columns, function($column){\r\n            return $column.show($scope) && $column.filter($scope);\r\n        });\r\n    }\r\n\r\n    function some(array, predicate){\r\n        var found = false;\r\n        for (var i = 0; i < array.length; i++) {\r\n            var obj = array[i];\r\n            if (predicate(obj)){\r\n                found = true;\r\n                break;\r\n            }\r\n        }\r\n        return found;\r\n    }\r\n\r\n    function commonInit(){\r\n        ngTableEventsChannel.onAfterReloadData(bindDataToScope, $scope, isMyPublisher);\r\n        ngTableEventsChannel.onPagesChanged(bindPagesToScope, $scope, isMyPublisher);\r\n\r\n        function bindDataToScope(params, newDatapage){\r\n            var visibleColumns = getVisibleColumns();\r\n            if (params.hasGroup()) {\r\n                $scope.$groups = newDatapage || [];\r\n                $scope.$groups.visibleColumnCount = visibleColumns.length;\r\n            } else {\r\n                $scope.$data = newDatapage || [];\r\n                $scope.$data.visibleColumnCount = visibleColumns.length;\r\n            }\r\n        }\r\n\r\n        function bindPagesToScope(params, newPages){\r\n            $scope.pages = newPages\r\n        }\r\n\r\n        function isMyPublisher(publisher){\r\n            return $scope.params === publisher;\r\n        }\r\n    }\r\n\r\n    commonInit();\r\n}\r\n\r\nexport { ngTableController };\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/browser/ngTableController.js\n// module id = 16\n// module chunks = 0","/**\r\n * ngTable: Table + Angular JS\r\n *\r\n * @author Vitalii Savchuk <esvit666@gmail.com>\r\n * @url https://github.com/esvit/ng-table/\r\n * @license New BSD License <http://creativecommons.org/licenses/BSD/>\r\n */\r\n\r\nimport angular from 'angular';\r\n\r\n/**\r\n * @ngdoc directive\r\n * @name ngTableDynamic\r\n * @module ngTable\r\n * @restrict A\r\n *\r\n * @description\r\n * A dynamic version of the {@link ngTable ngTable} directive that accepts a dynamic list of columns\r\n * definitions to render\r\n */\r\nngTableDynamic.$inject = [];\r\n\r\nfunction ngTableDynamic(){\r\n\r\n    return {\r\n        restrict: 'A',\r\n        priority: 1001,\r\n        scope: true,\r\n        controller: 'ngTableController',\r\n        compile: function(tElement) {\r\n            var row;\r\n\r\n            // IE 8 fix :not(.ng-table-group) selector\r\n            angular.forEach(tElement.find('tr'), function(tr) {\r\n                tr = angular.element(tr);\r\n                if (!tr.hasClass('ng-table-group') && !row) {\r\n                    row = tr;\r\n                }\r\n            });\r\n            if (!row) {\r\n                return;\r\n            }\r\n\r\n            angular.forEach(row.find('td'), function(item) {\r\n                var el = angular.element(item);\r\n                var getAttrValue = function(attr){\r\n                    return el.attr('x-data-' + attr) || el.attr('data-' + attr) || el.attr(attr);\r\n                };\r\n\r\n                // this used in responsive table\r\n                var titleExpr = getAttrValue('title');\r\n                if (!titleExpr){\r\n                    el.attr('data-title-text', '{{$columns[$index].titleAlt(this) || $columns[$index].title(this)}}');\r\n                }\r\n                var showExpr = el.attr('ng-if');\r\n                if (!showExpr){\r\n                    el.attr('ng-if', '$columns[$index].show(this)');\r\n                }\r\n            });\r\n            return function (scope, element, attrs, controller) {\r\n                var expr = controller.parseNgTableDynamicExpr(attrs.ngTableDynamic);\r\n\r\n                controller.setupBindingsToInternalScope(expr.tableParams);\r\n                controller.compileDirectiveTemplates();\r\n\r\n                scope.$watchCollection(expr.columns, function (newCols/*, oldCols*/) {\r\n                    scope.$columns = controller.buildColumns(newCols);\r\n                    controller.loadFilterData(scope.$columns);\r\n                });\r\n            };\r\n        }\r\n    };\r\n}\r\n\r\nexport { ngTableDynamic };\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/browser/ngTableDynamic.directive.js\n// module id = 17\n// module chunks = 0","/**\r\n * ngTable: Table + Angular JS\r\n *\r\n * @author Vitalii Savchuk <esvit666@gmail.com>\r\n * @url https://github.com/esvit/ng-table/\r\n * @license New BSD License <http://creativecommons.org/licenses/BSD/>\r\n */\r\n\r\nimport angular from 'angular';\r\n\r\nngTableFilterConfigProvider.$inject = [];\r\n\r\nfunction ngTableFilterConfigProvider(){\r\n    var config;\r\n    var defaultConfig = {\r\n        defaultBaseUrl: 'ng-table/filters/',\r\n        defaultExt: '.html',\r\n        aliasUrls: {}\r\n    };\r\n\r\n    this.$get = ngTableFilterConfig;\r\n    this.resetConfigs = resetConfigs;\r\n    this.setConfig = setConfig;\r\n\r\n    init();\r\n\r\n    /////////\r\n\r\n    function init(){\r\n        resetConfigs();\r\n    }\r\n\r\n    function resetConfigs(){\r\n        config = defaultConfig;\r\n    }\r\n\r\n    function setConfig(customConfig){\r\n        var mergeConfig = angular.extend({}, config, customConfig);\r\n        mergeConfig.aliasUrls = angular.extend({}, config.aliasUrls, customConfig.aliasUrls);\r\n        config = mergeConfig;\r\n    }\r\n\r\n    /////////\r\n\r\n    ngTableFilterConfig.$inject = [];\r\n\r\n    function ngTableFilterConfig(){\r\n\r\n        var publicConfig;\r\n\r\n        var service = {\r\n            config: publicConfig,\r\n            getTemplateUrl: getTemplateUrl,\r\n            getUrlForAlias: getUrlForAlias\r\n        };\r\n        Object.defineProperty(service, \"config\", {\r\n            get: function(){\r\n                return publicConfig = publicConfig || angular.copy(config);\r\n            },\r\n            enumerable: true\r\n        });\r\n\r\n        return service;\r\n\r\n        /////////\r\n\r\n        function getTemplateUrl(filterDef, filterKey){\r\n            if (angular.isObject(filterDef)){\r\n                filterDef = filterDef.id;\r\n            }\r\n            if (filterDef.indexOf('/') !== -1){\r\n                return filterDef;\r\n            }\r\n\r\n            return service.getUrlForAlias(filterDef, filterKey);\r\n        }\r\n\r\n        function getUrlForAlias(aliasName/*, filterKey*/){\r\n            return config.aliasUrls[aliasName] || config.defaultBaseUrl + aliasName + config.defaultExt;\r\n        }\r\n    }\r\n}\r\n\r\nexport { ngTableFilterConfigProvider };\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/browser/ngTableFilterConfig.js\n// module id = 18\n// module chunks = 0","/**\r\n * ngTable: Table + Angular JS\r\n *\r\n * @author Vitalii Savchuk <esvit666@gmail.com>\r\n * @url https://github.com/esvit/ng-table/\r\n * @license New BSD License <http://creativecommons.org/licenses/BSD/>\r\n */\r\n\r\nimport templateUrl  from './filterRow.html';\r\n\r\nngTableFilterRow.$inject = [];\r\n\r\nfunction ngTableFilterRow(){\r\n    var directive = {\r\n        restrict: 'E',\r\n        replace: true,\r\n        templateUrl: templateUrl,\r\n        scope: true,\r\n        controller: 'ngTableFilterRowController'\r\n    };\r\n    return directive;\r\n}\r\n\r\nexport { ngTableFilterRow };\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/browser/ngTableFilterRow.directive.js\n// module id = 19\n// module chunks = 0","/**\r\n * ngTable: Table + Angular JS\r\n *\r\n * @author Vitalii Savchuk <esvit666@gmail.com>\r\n * @url https://github.com/esvit/ng-table/\r\n * @license New BSD License <http://creativecommons.org/licenses/BSD/>\r\n */\r\n\r\nimport angular from 'angular';\r\n\r\nngTableFilterRowController.$inject = ['$scope', 'ngTableFilterConfig'];\r\n\r\nfunction ngTableFilterRowController($scope, ngTableFilterConfig){\r\n\r\n    $scope.config = ngTableFilterConfig;\r\n\r\n    $scope.getFilterCellCss = function (filter, layout){\r\n        if (layout !== 'horizontal') {\r\n            return 's12';\r\n        }\r\n\r\n        var size = Object.keys(filter).length;\r\n        var width = parseInt(12 / size, 10);\r\n        return 's' + width;\r\n    };\r\n\r\n    $scope.getFilterPlaceholderValue = function(filterValue/*, filterName*/){\r\n        if (angular.isObject(filterValue)) {\r\n            return filterValue.placeholder;\r\n        } else {\r\n            return '';\r\n        }\r\n    };\r\n}\r\n\r\nexport { ngTableFilterRowController };\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/browser/ngTableFilterRowController.js\n// module id = 20\n// module chunks = 0","/**\r\n * ngTable: Table + Angular JS\r\n *\r\n * @author Vitalii Savchuk <esvit666@gmail.com>\r\n * @url https://github.com/esvit/ng-table/\r\n * @license New BSD License <http://creativecommons.org/licenses/BSD/>\r\n */\r\n\r\nimport templateUrl  from './groupRow.html';\r\n\r\nngTableGroupRow.$inject = [];\r\n\r\nfunction ngTableGroupRow(){\r\n    var directive = {\r\n        restrict: 'E',\r\n        replace: true,\r\n        templateUrl: templateUrl,\r\n        scope: true,\r\n        controller: 'ngTableGroupRowController',\r\n        controllerAs: 'dctrl'\r\n    };\r\n    return directive;\r\n}\r\n\r\nexport { ngTableGroupRow };\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/browser/ngTableGroupRow.directive.js\n// module id = 21\n// module chunks = 0","/**\r\n * ngTable: Table + Angular JS\r\n *\r\n * @author Vitalii Savchuk <esvit666@gmail.com>\r\n * @url https://github.com/esvit/ng-table/\r\n * @license New BSD License <http://creativecommons.org/licenses/BSD/>\r\n */\r\n\r\nimport angular from 'angular';\r\n\r\n\r\nngTableGroupRowController.$inject = ['$scope'];\r\n\r\nfunction ngTableGroupRowController($scope){\r\n\r\n    var groupFns = [];\r\n\r\n    init();\r\n\r\n    function init(){\r\n        $scope.getGroupables = getGroupables;\r\n        $scope.getGroupTitle = getGroupTitle;\r\n        $scope.getVisibleColumns = getVisibleColumns;\r\n        $scope.groupBy = groupBy;\r\n        $scope.isSelectedGroup = isSelectedGroup;\r\n        $scope.toggleDetail = toggleDetail;\r\n\r\n        $scope.$watch('params.group()', setGroup, true);\r\n    }\r\n\r\n    function changeSortDirection(){\r\n      console.log(\"CSD\");\r\n        var newDirection;\r\n        if ($scope.params.hasGroup($scope.$selGroup, 'asc')) {\r\n            newDirection = 'desc';\r\n        } else if ($scope.params.hasGroup($scope.$selGroup, 'desc')){\r\n            newDirection = 'asc';\r\n        } else {\r\n            newDirection = 'asc';\r\n        }\r\n        $scope.params.group($scope.$selGroup, newDirection);\r\n    }\r\n\r\n    function findGroupColumn(groupKey) {\r\n        return $scope.$columns.filter(function ($column) {\r\n            return $column.groupable($scope) === groupKey;\r\n        })[0];\r\n    }\r\n\r\n    function getGroupTitle(group){\r\n        return angular.isFunction(group) ? group.title : group.title($scope);\r\n    }\r\n\r\n    function getGroupables(){\r\n        var groupableCols = $scope.$columns.filter(function ($column) {\r\n            return $column.groupable($scope);\r\n        });\r\n        return groupFns.concat(groupableCols);\r\n    }\r\n\r\n    function getVisibleColumns(){\r\n        return $scope.$columns.filter(function($column){\r\n            return $column.show($scope);\r\n        })\r\n    }\r\n\r\n    function groupBy(group){\r\n        console.log(\"CD\");\r\n        if (isSelectedGroup(group)){\r\n            changeSortDirection();\r\n        } else {          \r\n            if (group.groupable){\r\n                $scope.params.group(group.groupable($scope));\r\n            } else{\r\n                $scope.params.group(group);\r\n            }\r\n        }        \r\n    }\r\n\r\n    function isSelectedGroup(group){\r\n        if (group.groupable){\r\n            return group.groupable($scope) === $scope.$selGroup;\r\n        } else {\r\n            return group === $scope.$selGroup;\r\n        }\r\n    }\r\n\r\n    function setGroup(group){\r\n        var existingGroupCol = findGroupColumn($scope.$selGroup);\r\n        if (existingGroupCol && existingGroupCol.show.assign){\r\n            existingGroupCol.show.assign($scope, true);\r\n        }\r\n        if (angular.isFunction(group)) {\r\n            groupFns = [group];\r\n            $scope.$selGroup = group;\r\n            $scope.$selGroupTitle = group.title;\r\n        } else {\r\n            // note: currently only one group is implemented\r\n            var groupKey = Object.keys(group || {})[0];\r\n            var groupedColumn = findGroupColumn(groupKey);\r\n            if (groupedColumn) {\r\n                $scope.$selGroupTitle = groupedColumn.title($scope);\r\n                $scope.$selGroup = groupKey;\r\n                if (groupedColumn.show.assign) {\r\n                    groupedColumn.show.assign($scope, false);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function toggleDetail(){\r\n        $scope.params.settings().groupOptions.isExpanded = !$scope.params.settings().groupOptions.isExpanded;\r\n        return $scope.params.reload();\r\n    }\r\n}\r\n\r\nexport { ngTableGroupRowController };\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/browser/ngTableGroupRowController.js\n// module id = 22\n// module chunks = 0","/**\r\n * ngTable: Table + Angular JS\r\n *\r\n * @author Vitalii Savchuk <esvit666@gmail.com>\r\n * @url https://github.com/esvit/ng-table/\r\n * @license New BSD License <http://creativecommons.org/licenses/BSD/>\r\n */\r\n\r\nimport angular from 'angular';\r\n\r\n/**\r\n * @ngdoc directive\r\n * @name ngTablePagination\r\n * @module ngTable\r\n * @restrict A\r\n */\r\nngTablePagination.$inject = ['$compile', 'ngTableEventsChannel'];\r\n\r\nfunction ngTablePagination($compile, ngTableEventsChannel) {\r\n\r\n    return {\r\n        restrict: 'A',\r\n        scope: {\r\n            'params': '=ngTablePagination',\r\n            'templateUrl': '='\r\n        },\r\n        replace: false,\r\n        link: function(scope, element/*, attrs*/) {\r\n\r\n            ngTableEventsChannel.onAfterReloadData(function(pubParams) {\r\n                scope.pages = pubParams.generatePagesArray();\r\n            }, scope, function(pubParams){\r\n                return pubParams === scope.params;\r\n            });\r\n\r\n            scope.$watch('templateUrl', function(templateUrl) {\r\n                if (angular.isUndefined(templateUrl)) {\r\n                    return;\r\n                }\r\n                var template = angular.element(document.createElement('div'));\r\n                template.attr({\r\n                    'ng-include': 'templateUrl'\r\n                });\r\n                element.append(template);\r\n                $compile(template)(scope);\r\n            });\r\n        }\r\n    };\r\n}\r\n\r\nexport { ngTablePagination };\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/browser/ngTablePagination.directive.js\n// module id = 23\n// module chunks = 0","/**\r\n * ngTable: Table + Angular JS\r\n *\r\n * @author Vitalii Savchuk <esvit666@gmail.com>\r\n * @url https://github.com/esvit/ng-table/\r\n * @license New BSD License <http://creativecommons.org/licenses/BSD/>\r\n */\r\n\r\nimport angular from 'angular';\r\n\r\n/**\r\n * @ngdoc directive\r\n * @name ngTableSelectFilterDs\r\n * @module ngTable\r\n * @restrict A\r\n *\r\n * @description\r\n * Takes the array returned by $column.filterData and makes it available as `$selectData` on the `$scope`.\r\n *\r\n * The resulting `$selectData` array will contain an extra item that is suitable to represent the user\r\n * \"deselecting\" an item from a `<select>` tag\r\n *\r\n * This directive is is focused on providing a datasource to an `ngOptions` directive\r\n */\r\nngTableSelectFilterDs.$inject = [];\r\n\r\nfunction ngTableSelectFilterDs(){\r\n    // note: not using isolated or child scope \"by design\"\r\n    // this is to allow this directive to be combined with other directives that do\r\n\r\n    var directive = {\r\n        restrict: 'A',\r\n        controller: ngTableSelectFilterDsController\r\n    };\r\n    return directive;\r\n}\r\n\r\nngTableSelectFilterDsController.$inject = ['$scope', '$parse', '$attrs', '$q'];\r\nfunction ngTableSelectFilterDsController($scope, $parse, $attrs, $q){\r\n\r\n    var $column = {};\r\n    init();\r\n\r\n    function init(){\r\n        $column = $parse($attrs.ngTableSelectFilterDs)($scope);\r\n        $scope.$watch(function(){\r\n            return $column.data;\r\n        }, bindDataSource);\r\n    }\r\n\r\n    function bindDataSource(){\r\n        getSelectListData($column).then(function(data){\r\n            if (data && !hasEmptyOption(data)){\r\n                data.unshift({ id: '', title: ''});\r\n            }\r\n            data = data || [];\r\n            $scope.$selectData = data;\r\n        });\r\n    }\r\n\r\n    function hasEmptyOption(data) {\r\n        var isMatch;\r\n        for (var i = 0; i < data.length; i++) {\r\n            var item = data[i];\r\n            if (item && item.id === '') {\r\n                isMatch = true;\r\n                break;\r\n            }\r\n        }\r\n        return isMatch;\r\n    }\r\n\r\n    function getSelectListData($column) {\r\n        var data = angular.isFunction($column.data) ? $column.data() : $column.data;\r\n        return $q.when(data);\r\n    }\r\n}\r\n\r\nexport { ngTableSelectFilterDs };\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/browser/ngTableSelectFilterDs.directive.js\n// module id = 24\n// module chunks = 0","/**\r\n * ngTable: Table + Angular JS\r\n *\r\n * @author Vitalii Savchuk <esvit666@gmail.com>\r\n * @url https://github.com/esvit/ng-table/\r\n * @license New BSD License <http://creativecommons.org/licenses/BSD/>\r\n */\r\n\r\nimport templateUrl  from './sorterRow.html';\r\n\r\nngTableSorterRow.$inject = [];\r\n\r\nfunction ngTableSorterRow(){\r\n    var directive = {\r\n        restrict: 'E',\r\n        replace: true,\r\n        templateUrl: templateUrl,\r\n        scope: true,\r\n        controller: 'ngTableSorterRowController'\r\n    };\r\n    return directive;\r\n}\r\n\r\nexport { ngTableSorterRow };\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/browser/ngTableSorterRow.directive.js\n// module id = 25\n// module chunks = 0","/**\r\n * ngTable: Table + Angular JS\r\n *\r\n * @author Vitalii Savchuk <esvit666@gmail.com>\r\n * @url https://github.com/esvit/ng-table/\r\n * @license New BSD License <http://creativecommons.org/licenses/BSD/>\r\n */\r\n\r\nngTableSorterRowController.$inject = ['$scope'];\r\n\r\nfunction ngTableSorterRowController($scope){\r\n\r\n    $scope.sortBy = sortBy;\r\n\r\n    ///////////\r\n\r\n    function sortBy($column, event) {\r\n        var parsedSortable = $column.sortable && $column.sortable();\r\n        if (!parsedSortable) {\r\n            return;\r\n        }\r\n        var defaultSort = $scope.params.settings().defaultSort;\r\n        var inverseSort = (defaultSort === 'asc' ? 'desc' : 'asc');\r\n        var sorting = $scope.params.sorting() && $scope.params.sorting()[parsedSortable] && ($scope.params.sorting()[parsedSortable] === defaultSort);\r\n        var sortingParams = (event.ctrlKey || event.metaKey) ? $scope.params.sorting() : {};\r\n        sortingParams[parsedSortable] = (sorting ? inverseSort : defaultSort);\r\n        $scope.params.parameters({\r\n            sorting: sortingParams\r\n        });\r\n    }\r\n}\r\n\r\nexport { ngTableSorterRowController };\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/browser/ngTableSorterRowController.js\n// module id = 26\n// module chunks = 0","/**\r\n * ngTable: Table + Angular JS\r\n *\r\n * @author Vitalii Savchuk <esvit666@gmail.com>\r\n * @url https://github.com/esvit/ng-table/\r\n * @license New BSD License <http://creativecommons.org/licenses/BSD/>\r\n */\r\n\r\nimport angular from 'angular';\r\n\r\nngTableDefaultGetDataProvider.$inject = [];\r\n\r\n/**\r\n * @ngdoc provider\r\n * @name ngTableDefaultGetDataProvider\r\n * @description Allows for the configuration of the ngTableDefaultGetData service.\r\n *\r\n * Set filterFilterName to the name of a angular filter that knows how to apply the values returned by\r\n * `NgTableParams.filter()` to restrict an array of data.\r\n *\r\n * Set sortingFilterName to the name of a angular filter that knows how to apply the values returned by\r\n * `NgTableParams.orderBy()` to sort an array of data.\r\n *\r\n * Out of the box the `ngTableDefaultGetData` service will be configured to use the angular `filter` and `orderBy`\r\n * filters respectively\r\n */\r\nfunction ngTableDefaultGetDataProvider(){\r\n    var provider = this;\r\n    provider.$get = ngTableDefaultGetData;\r\n    provider.filterFilterName = 'filter';\r\n    provider.sortingFilterName = 'orderBy';\r\n\r\n    ///////////\r\n\r\n    ngTableDefaultGetData.$inject = ['$filter'];\r\n\r\n    /**\r\n     * @ngdoc service\r\n     * @name ngTableDefaultGetData\r\n     * @description A default implementation of the getData function that will apply the `filter`, `orderBy` and\r\n     * paging values from the `NgTableParams` instance supplied to the data array supplied.\r\n     *\r\n     * The outcome will be to return the resulting array and to assign the total item count after filtering\r\n     * to the `total` of the `NgTableParams` instance supplied\r\n     */\r\n    function ngTableDefaultGetData($filter) {\r\n\r\n        var defaultDataOptions = {applyFilter: true, applySort: true, applyPaging: true};\r\n\r\n        getData.applyPaging = applyPaging;\r\n        getData.getFilterFn = getFilterFn;\r\n        getData.getOrderByFn = getOrderByFn;\r\n\r\n        return getData;\r\n\r\n        function getFilterFn(params) {\r\n            var filterOptions = params.settings().filterOptions;\r\n            if (angular.isFunction(filterOptions.filterFn)){\r\n                return filterOptions.filterFn;\r\n            } else {\r\n                return $filter(filterOptions.filterFilterName || provider.filterFilterName);\r\n            }\r\n        }\r\n\r\n        function getOrderByFn (/*params*/){            \r\n            return $filter(provider.sortingFilterName);\r\n        }\r\n\r\n        function applyFilter(data, params) {\r\n            if (!params.hasFilter()) {\r\n                return data;\r\n            }\r\n\r\n            var filter = params.filter(true);\r\n            var filterKeys = Object.keys(filter);\r\n            var parsedFilter = filterKeys.reduce(function(result, key){\r\n                result = setPath(result, filter[key], key);\r\n                return result;\r\n            }, {});\r\n            var filterFn = getFilterFn(params);\r\n            return filterFn.call(params, data, parsedFilter, params.settings().filterOptions.filterComparator);\r\n        }\r\n\r\n        function applyPaging(data, params) {\r\n            var pagedData = data.slice((params.page() - 1) * params.count(), params.page() * params.count());\r\n            params.total(data.length); // set total for recalc pagination\r\n            return pagedData;\r\n        }\r\n\r\n        function applySort(data, params) {\r\n            var orderBy = params.orderBy();\r\n            var orderByFn = getOrderByFn(params);  \r\n            console.log(orderBy,orderByFn);\r\n            return orderBy.length ? orderByFn(data, orderBy) : data;\r\n        }\r\n\r\n        function getData(data, params) {\r\n            if (data == null){\r\n                return [];\r\n            }\r\n\r\n            var options = angular.extend({}, defaultDataOptions, params.settings().dataOptions);\r\n\r\n            var fData = options.applyFilter ? applyFilter(data, params) : data;\r\n            var orderedData = options.applySort ? applySort(fData, params) : fData;\r\n            return options.applyPaging ? applyPaging(orderedData, params) : orderedData;\r\n        }\r\n\r\n        // Sets the value at any depth in a nested object based on the path\r\n        // note: adapted from: underscore-contrib#setPath\r\n        function setPath(obj, value, path) {\r\n            var keys     = path.split('.');\r\n            var ret      = obj;\r\n            var lastKey  = keys[keys.length -1];\r\n            var target   = ret;\r\n\r\n            var parentPathKeys = keys.slice(0, keys.length -1);\r\n            parentPathKeys.forEach(function(key) {\r\n                if (!target.hasOwnProperty(key)) {\r\n                    target[key] = {};\r\n                }\r\n                target = target[key];\r\n            });\r\n\r\n            target[lastKey] = value;\r\n            return ret;\r\n        }\r\n    }\r\n}\r\n\r\nexport { ngTableDefaultGetDataProvider };\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/core/ngTableDefaultGetData.js\n// module id = 27\n// module chunks = 0","/**\r\n * ngTable: Table + Angular JS\r\n *\r\n * @author Vitalii Savchuk <esvit666@gmail.com>\r\n * @url https://github.com/esvit/ng-table/\r\n * @license New BSD License <http://creativecommons.org/licenses/BSD/>\r\n */\r\n\r\n/**\r\n * @ngdoc object\r\n * @name ngTableDefaultParams\r\n * @module ngTable\r\n * @description Default Parameters for ngTable\r\n */\r\nvar ngTableDefaults = {\r\n    params: {},\r\n    settings: {}\r\n};\r\n\r\nexport { ngTableDefaults };\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/core/ngTableDefaults.js\n// module id = 28\n// module chunks = 0","/**\r\n * ngTable: Table + Angular JS\r\n *\r\n * @author Vitalii Savchuk <esvit666@gmail.com>\r\n * @url https://github.com/esvit/ng-table/\r\n * @license New BSD License <http://creativecommons.org/licenses/BSD/>\r\n */\r\n\r\nimport angular from 'angular';\r\n\r\nngTableEventsChannel.$inject = ['$rootScope'];\r\n\r\n/**\r\n * @ngdoc service\r\n * @name ngTableEventsChannel\r\n * @description strongly typed pub/sub for `NgTableParams`\r\n *\r\n * Supported events:\r\n *\r\n * * afterCreated - raised when a new instance of `NgTableParams` has finished being constructed\r\n * * afterReloadData - raised when the `reload` event has finished loading new data\r\n * * datasetChanged - raised when `settings` receives a new data array\r\n * * pagesChanged - raised when a new pages array has been generated\r\n */\r\nfunction ngTableEventsChannel($rootScope){\r\n\r\n    var events = {};\r\n    events = addChangeEvent('afterCreated', events);\r\n    events = addChangeEvent('afterReloadData', events);\r\n    events = addChangeEvent('datasetChanged', events);\r\n    events = addChangeEvent('pagesChanged', events);\r\n    return events;\r\n\r\n    //////////\r\n\r\n    function addChangeEvent(eventName, target){\r\n        var fnName = eventName.charAt(0).toUpperCase() + eventName.substring(1);\r\n        var event = {};\r\n        event['on' + fnName] = createEventSubscriptionFn(eventName);\r\n        event['publish' + fnName] = createPublishEventFn(eventName);\r\n        return angular.extend(target, event);\r\n    }\r\n\r\n    function createEventSubscriptionFn(eventName){\r\n\r\n        return function subscription(handler/*[, eventSelector or $scope][, eventSelector]*/){\r\n            var eventSelector = angular.identity;\r\n            var scope = $rootScope;\r\n\r\n            if (arguments.length === 2){\r\n                if (angular.isFunction(arguments[1].$new)) {\r\n                    scope = arguments[1];\r\n                } else {\r\n                    eventSelector = arguments[1]\r\n                }\r\n            } else if (arguments.length > 2){\r\n                scope = arguments[1];\r\n                eventSelector = arguments[2];\r\n            }\r\n\r\n            // shorthand for subscriber to only receive events from a specific publisher instance\r\n            if (angular.isObject(eventSelector)) {\r\n                var requiredPublisher = eventSelector;\r\n                eventSelector = function(publisher){\r\n                    return publisher === requiredPublisher;\r\n                }\r\n            }\r\n\r\n            return scope.$on('ngTable:' + eventName, function(event, params/*, ...args*/){\r\n                // don't send events published by the internal NgTableParams created by ngTableController\r\n                if (params.isNullInstance) return;\r\n\r\n                var eventArgs = rest(arguments, 2);\r\n                var fnArgs = [params].concat(eventArgs);\r\n                if (eventSelector.apply(this, fnArgs)){\r\n                    handler.apply(this, fnArgs);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    function createPublishEventFn(eventName){\r\n        return function publish(/*args*/){\r\n            var fnArgs = ['ngTable:' + eventName].concat(Array.prototype.slice.call(arguments));\r\n            $rootScope.$broadcast.apply($rootScope, fnArgs);\r\n        }\r\n    }\r\n\r\n    function rest(array, n) {\r\n        return Array.prototype.slice.call(array, n == null ? 1 : n);\r\n    }\r\n}\r\n\r\nexport { ngTableEventsChannel };\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/core/ngTableEventsChannel.js\n// module id = 29\n// module chunks = 0","/**\r\n * ngTable: Table + Angular JS\r\n *\r\n * @author Vitalii Savchuk <esvit666@gmail.com>\r\n * @url https://github.com/esvit/ng-table/\r\n * @license New BSD License <http://creativecommons.org/licenses/BSD/>\r\n */\r\n\r\nimport angular from 'angular';\r\n\r\n/**\r\n * @ngdoc service\r\n * @name NgTableParams\r\n * @module ngTable\r\n * @description Parameters manager for ngTable\r\n */\r\nngTableParamsFactory.$inject = ['$q', '$log', '$filter', 'ngTableDefaults', 'ngTableDefaultGetData', 'ngTableEventsChannel'];\r\n\r\nfunction ngTableParamsFactory($q, $log, $filter, ngTableDefaults, ngTableDefaultGetData, ngTableEventsChannel) {\r\n\r\n    return NgTableParams;\r\n    \r\n    function NgTableParams(baseParameters, baseSettings) {\r\n\r\n        function isNumber(n) {\r\n            return !isNaN(parseFloat(n)) && isFinite(n);\r\n        }\r\n\r\n        // the ngTableController \"needs\" to create a dummy/null instance and it's important to know whether an instance\r\n        // is one of these\r\n        if (typeof baseParameters === \"boolean\"){\r\n            this.isNullInstance = true;\r\n        }\r\n\r\n        var self = this,\r\n            prevParamsMemento,\r\n            errParamsMemento,\r\n            isCommittedDataset = false,\r\n            initialEvents = [],\r\n            log = function() {\r\n                if (settings.debugMode && $log.debug) {\r\n                    $log.debug.apply($log, arguments);\r\n                }\r\n            },\r\n            defaultFilterOptions = {\r\n                filterComparator: undefined, // look for a substring match in case insensitive way\r\n                filterDelay: 500,\r\n                filterDelayThreshold: 10000, // size of dataset array that will trigger the filterDelay being applied\r\n                filterFilterName: undefined, // when defined overrides ngTableDefaultGetDataProvider.filterFilterName\r\n                filterFn: undefined, // when defined overrides the filter function that ngTableDefaultGetData uses\r\n                filterLayout: 'stack' // alternative: 'horizontal'\r\n            },\r\n            defaultGroupOptions = {\r\n                defaultSort: 'asc', // set to 'asc' or 'desc' to apply sorting to groups\r\n                isExpanded: true,\r\n                sortGroups: true\r\n            },\r\n            defaultSettingsFns = getDefaultSettingFns();\r\n\r\n        this.data = [];\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name NgTableParams#parameters\r\n         * @description Set new parameters or get current parameters\r\n         *\r\n         * @param {string} newParameters      New parameters\r\n         * @param {string} parseParamsFromUrl Flag if parse parameters like in url\r\n         * @returns {Object} Current parameters or `this`\r\n         */\r\n        this.parameters = function(newParameters, parseParamsFromUrl) {\r\n            parseParamsFromUrl = parseParamsFromUrl || false;\r\n            if (angular.isDefined(newParameters)) {\r\n                for (var key in newParameters) {\r\n                    var value = newParameters[key];\r\n                    if (parseParamsFromUrl && key.indexOf('[') >= 0) {\r\n                        var keys = key.split(/\\[(.*)\\]/).reverse()\r\n                        var lastKey = '';\r\n                        for (var i = 0, len = keys.length; i < len; i++) {\r\n                            var name = keys[i];\r\n                            if (name !== '') {\r\n                                var v = value;\r\n                                value = {};\r\n                                value[lastKey = name] = (isNumber(v) ? parseFloat(v) : v);\r\n                            }\r\n                        }\r\n                        if (lastKey === 'sorting') {\r\n                            params[lastKey] = {};\r\n                        }\r\n                        params[lastKey] = angular.extend(params[lastKey] || {}, value[lastKey]);\r\n                    } else {\r\n                        if (key === 'group'){\r\n                            params[key] = parseGroup(newParameters[key]);\r\n                        } else {\r\n                            params[key] = (isNumber(newParameters[key]) ? parseFloat(newParameters[key]) : newParameters[key]);\r\n                        }\r\n                    }\r\n                }\r\n                log('ngTable: set parameters', params);\r\n                return this;\r\n            }\r\n            return params;\r\n        };\r\n\r\n        function parseGroup(group){\r\n            var defaultSort = settings.groupOptions && settings.groupOptions.defaultSort;\r\n            if (angular.isFunction(group)) {\r\n                if (group.sortDirection == null){\r\n                    group.sortDirection = defaultSort;\r\n                }\r\n                return group;\r\n            } else if (angular.isString(group)) {\r\n                var grp = {};\r\n                grp[group] = defaultSort;\r\n                return grp;\r\n            } else if (angular.isObject(group)) {\r\n                for (var key in group) {\r\n                    if (group[key] == null){\r\n                        group[key] = defaultSort;\r\n                    }\r\n                }\r\n                return group;\r\n            } else {\r\n                return group;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name NgTableParams#settings\r\n         * @description Set new settings for table\r\n         *\r\n         * @param {string} newSettings New settings or undefined\r\n         * @returns {Object} Current settings or `this`\r\n         */\r\n        this.settings = function(newSettings) {\r\n            if (angular.isDefined(newSettings)) {\r\n\r\n                // todo: don't modify newSettings object: this introduces unexpected side effects;\r\n                // instead take a copy of newSettings\r\n\r\n                if (newSettings.filterOptions){\r\n                    newSettings.filterOptions = angular.extend({}, settings.filterOptions, newSettings.filterOptions);\r\n                }\r\n                if (newSettings.groupOptions){\r\n                    newSettings.groupOptions = angular.extend({}, settings.groupOptions, newSettings.groupOptions);\r\n                }\r\n\r\n                if (angular.isArray(newSettings.dataset)) {\r\n                    //auto-set the total from passed in dataset\r\n                    newSettings.total = newSettings.dataset.length;\r\n                }\r\n\r\n                var originalDataset = settings.dataset;\r\n                settings = angular.extend(settings, newSettings);\r\n\r\n                if (angular.isArray(newSettings.dataset)) {\r\n                    optimizeFilterDelay();\r\n                }\r\n\r\n                // note: using != as want null and undefined to be treated the same\r\n                var hasDatasetChanged = newSettings.hasOwnProperty('dataset') && (newSettings.dataset != originalDataset);\r\n                if (hasDatasetChanged) {\r\n                    if (isCommittedDataset){\r\n                        this.page(1); // reset page as a new dataset has been supplied\r\n                    }\r\n                    isCommittedDataset = false;\r\n\r\n                    var fireEvent = function () {\r\n                        ngTableEventsChannel.publishDatasetChanged(self, newSettings.dataset, originalDataset);\r\n                    };\r\n\r\n                    if (initialEvents){\r\n                        initialEvents.push(fireEvent);\r\n                    } else {\r\n                        fireEvent();\r\n                    }\r\n                }\r\n                log('ngTable: set settings', settings);\r\n                return this;\r\n            }\r\n            return settings;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name NgTableParams#page\r\n         * @description If parameter page not set return current page else set current page\r\n         *\r\n         * @param {string} page Page number\r\n         * @returns {Object|Number} Current page or `this`\r\n         */\r\n        this.page = function(page) {\r\n            return angular.isDefined(page) ? this.parameters({\r\n                'page': page\r\n            }) : params.page;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name NgTableParams#total\r\n         * @description If parameter total not set return current quantity else set quantity\r\n         *\r\n         * @param {string} total Total quantity of items\r\n         * @returns {Object|Number} Current page or `this`\r\n         */\r\n        this.total = function(total) {\r\n            return angular.isDefined(total) ? this.settings({\r\n                'total': total\r\n            }) : settings.total;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name NgTableParams#count\r\n         * @description If parameter count not set return current count per page else set count per page\r\n         *\r\n         * @param {string} count Count per number\r\n         * @returns {Object|Number} Count per page or `this`\r\n         */\r\n        this.count = function(count) {\r\n            // reset to first page because can be blank page\r\n            return angular.isDefined(count) ? this.parameters({\r\n                'count': count,\r\n                'page': 1\r\n            }) : params.count;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name NgTableParams#filter\r\n         * @description If 'filter' parameter not set return current filter else set current filter\r\n         *\r\n         * Note: when assigning a new filter, {@link NgTableParams#page page} will be set to 1\r\n         *\r\n         * @param {Object|Boolean} filter 'object': new filter to assign or\r\n         * 'true': to return the current filter minus any insignificant values (null,  undefined and empty string); or\r\n         * 'falsey': to return the current filter \"as is\"\r\n         * @returns {Object} Current filter or `this`\r\n         */\r\n        this.filter = function(filter) {\r\n            if (angular.isDefined(filter) && angular.isObject(filter)) {\r\n                return this.parameters({\r\n                    'filter': filter,\r\n                    'page': 1\r\n                });\r\n            } else if (filter === true){\r\n                var keys = Object.keys(params.filter);\r\n                var significantFilter = {};\r\n                for (var i=0; i < keys.length; i++){\r\n                    var filterValue = params.filter[keys[i]];\r\n                    if (filterValue != null && filterValue !== '') {\r\n                        significantFilter[keys[i]] = filterValue;\r\n                    }\r\n                }\r\n                return significantFilter;\r\n            } else {\r\n                return params.filter;\r\n            }\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name NgTableParams#group\r\n         * @description If 'group' parameter is not set, return current grouping. Otherwise set current group.\r\n         *\r\n         * @param {string|Function|Object} group New group field\r\n         * @param {string} sortDirection Optional direction that the list of groups should be sorted\r\n         * @returns {Object} Current grouping or `this`\r\n         */\r\n        this.group = function(group, sortDirection) {\r\n            if (!angular.isDefined(group)){\r\n                return params.group;\r\n            }\r\n\r\n            var newParameters = {\r\n                page: 1\r\n            };\r\n            if (angular.isFunction(group) && angular.isDefined(sortDirection)){\r\n                group.sortDirection = sortDirection;\r\n                newParameters.group = group;\r\n            } else if (angular.isDefined(group) && angular.isDefined(sortDirection)) {\r\n                var groupArray = {};\r\n                groupArray[group] = sortDirection;\r\n                newParameters.group = groupArray;\r\n            } else {\r\n                newParameters.group = group;\r\n            }\r\n            this.parameters(newParameters);\r\n            return this;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name NgTableParams#sorting\r\n         * @description If 'sorting' parameter is not set, return current sorting. Otherwise set current sorting.\r\n         *\r\n         * @param {string} sorting New sorting\r\n         * @returns {Object} Current sorting or `this`\r\n         */\r\n        this.sorting = function(sorting) {\r\n            if (arguments.length == 2) {\r\n                var sortArray = {};\r\n                sortArray[sorting] = arguments[1];\r\n                this.parameters({\r\n                    'sorting': sortArray\r\n                });\r\n                return this;\r\n            }\r\n            return angular.isDefined(sorting) ? this.parameters({\r\n                'sorting': sorting\r\n            }) : params.sorting;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name NgTableParams#isSortBy\r\n         * @description Checks sort field\r\n         *\r\n         * @param {string} field     Field name\r\n         * @param {string} direction Optional direction of sorting ('asc' or 'desc')\r\n         * @returns {Array} Return true if field sorted by direction\r\n         */\r\n        this.isSortBy = function(field, direction) {\r\n            if(direction !== undefined) {\r\n                return angular.isDefined(params.sorting[field]) && params.sorting[field] == direction;\r\n            } else {\r\n                return angular.isDefined(params.sorting[field]);\r\n            }\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name NgTableParams#orderBy\r\n         * @description Return object of sorting parameters for angular filter\r\n         *\r\n         * @returns {Array} Array like: [ '-name', '+age' ]\r\n         */\r\n        this.orderBy = function() {\r\n            return convertSortToOrderBy(params.sorting);\r\n        };\r\n\r\n        function convertSortToOrderBy(sorting){\r\n            var result = [];\r\n            for (var column in sorting) {\r\n                result.push((sorting[column] === \"asc\" ? \"+\" : \"-\") + column);\r\n            }\r\n            return result;\r\n        }\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name NgTableParams#generatePagesArray\r\n         * @description Generate array of pages\r\n         *\r\n         * When no arguments supplied, the current parameter state of this `NgTableParams` instance will be used\r\n         *\r\n         * @param {boolean} currentPage which page must be active\r\n         * @param {boolean} totalItems  Total quantity of items\r\n         * @param {boolean} pageSize    Quantity of items on page\r\n         * @param {number} maxBlocks    Quantity of blocks for pagination\r\n         * @returns {Array} Array of pages\r\n         */\r\n        this.generatePagesArray = function(currentPage, totalItems, pageSize, maxBlocks) {\r\n            if (!arguments.length){\r\n                currentPage = this.page();\r\n                totalItems = this.total();\r\n                pageSize = this.count();\r\n            }\r\n\r\n            var maxPage, maxPivotPages, minPage, numPages, pages;\r\n            maxBlocks = maxBlocks && maxBlocks < 6 ? 6 : maxBlocks;\r\n\r\n            pages = [];\r\n            numPages = Math.ceil(totalItems / pageSize);\r\n            if (numPages > 1) {\r\n                pages.push({\r\n                    type: 'prev',\r\n                    number: Math.max(1, currentPage - 1),\r\n                    active: currentPage > 1\r\n                });\r\n                pages.push({\r\n                    type: 'first',\r\n                    number: 1,\r\n                    active: currentPage > 1,\r\n                    current: currentPage === 1\r\n                });\r\n                maxPivotPages = Math.round((settings.paginationMaxBlocks - settings.paginationMinBlocks) / 2);\r\n                minPage = Math.max(2, currentPage - maxPivotPages);\r\n                maxPage = Math.min(numPages - 1, currentPage + maxPivotPages * 2 - (currentPage - minPage));\r\n                minPage = Math.max(2, minPage - (maxPivotPages * 2 - (maxPage - minPage)));\r\n                var i = minPage;\r\n                while (i <= maxPage) {\r\n                    if ((i === minPage && i !== 2) || (i === maxPage && i !== numPages - 1)) {\r\n                        pages.push({\r\n                            type: 'more',\r\n                            active: false\r\n                        });\r\n                    } else {\r\n                        pages.push({\r\n                            type: 'page',\r\n                            number: i,\r\n                            active: currentPage !== i,\r\n                            current: currentPage === i\r\n                        });\r\n                    }\r\n                    i++;\r\n                }\r\n                pages.push({\r\n                    type: 'last',\r\n                    number: numPages,\r\n                    active: currentPage !== numPages,\r\n                    current: currentPage === numPages\r\n                });\r\n                pages.push({\r\n                    type: 'next',\r\n                    number: Math.min(numPages, currentPage + 1),\r\n                    active: currentPage < numPages\r\n                });\r\n            }\r\n            return pages;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name NgTableParams#isDataReloadRequired\r\n         * @description Return true when a change to this `NgTableParams` instance should require the reload method\r\n         * to be run so as to ensure the data presented to the user reflects the `NgTableParams`\r\n         *\r\n         * Note that this method will return false when the reload method has run but fails. In this case\r\n         * `hasErrorState` will return true.\r\n         */\r\n        this.isDataReloadRequired = function(){\r\n            // note: using != as want to treat null and undefined the same\r\n            return !isCommittedDataset || !angular.equals(createComparableParams(), prevParamsMemento)\r\n                || hasGlobalSearchFieldChanges();\r\n        };\r\n\r\n        function createComparableParams(){\r\n            var result = {params: params};\r\n            if (angular.isFunction(params.group)){\r\n                result.groupSortDirection = params.group.sortDirection;\r\n            }\r\n            return result\r\n        }\r\n        /**\r\n         * @ngdoc method\r\n         * @name NgTableParams#hasFilter\r\n         * @description Determines if NgTableParams#filter has significant filter value(s)\r\n         * (any value except null, undefined, or empty string)\r\n         * @returns {Boolean} true when NgTableParams#filter has at least one significant field value\r\n         */\r\n        this.hasFilter = function(){\r\n            return Object.keys(this.filter(true)).length > 0;\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name NgTableParams#hasGroup\r\n         * @description Determines if at least one group has been set\r\n         * @returns {Boolean}\r\n         */\r\n        this.hasGroup = function(group, sortDirection){\r\n            if (group == null) {\r\n                return angular.isFunction(params.group) || Object.keys(params.group).length > 0\r\n            }\r\n\r\n            if (angular.isFunction(group)) {\r\n                if (sortDirection == null) {\r\n                    return params.group === group;\r\n                } else {\r\n                    return params.group === group && group.sortDirection === sortDirection;\r\n                }\r\n            } else {\r\n                if (sortDirection == null) {\r\n                    return Object.keys(params.group).indexOf(group) !== -1;\r\n                } else {\r\n                    return params.group[group] === sortDirection;\r\n                }\r\n            }\r\n        };\r\n        \r\n        this.hasGroupHeader = function(){\r\n          return angular.isFunction(params.showGroupHeader)?params.showGroupHeader():params.showGroupHeader;          \r\n        }\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name NgTableParams#hasFilterChanges\r\n         * @description Return true when a change to `NgTableParams.filters`require the reload method\r\n         * to be run so as to ensure the data presented to the user reflects these filters\r\n         */\r\n        this.hasFilterChanges = function(){\r\n            var previousFilter = (prevParamsMemento && prevParamsMemento.params.filter);\r\n            return !angular.equals((params.filter), previousFilter) || hasGlobalSearchFieldChanges();\r\n        };\r\n\r\n        function hasGlobalSearchFieldChanges(){\r\n            var currentVal = (params.filter && params.filter.$);\r\n            var previousVal =\r\n                (prevParamsMemento && prevParamsMemento.params.filter && prevParamsMemento.params.filter.$);\r\n            return !angular.equals(currentVal, previousVal);\r\n        }\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name NgTableParams#url\r\n         * @description Return groups for table grouping\r\n         *\r\n         * @param {boolean} asString flag indicates return array of string or object\r\n         * @returns {Array} If asString = true will be return array of url string parameters else key-value object\r\n         */\r\n        this.url = function(asString) {\r\n            asString = asString || false;\r\n            var pairs = (asString ? [] : {});\r\n            for (var key in params) {\r\n                if (params.hasOwnProperty(key)) {\r\n                    var item = params[key],\r\n                        name = encodeURIComponent(key);\r\n                    if (typeof item === \"object\") {\r\n                        for (var subkey in item) {\r\n                            if (isSignificantValue(item[subkey], key)) {\r\n                                var pname = name + \"[\" + encodeURIComponent(subkey) + \"]\";\r\n                                collectValue(item[subkey], pname);\r\n                            }\r\n                        }\r\n                    } else if (!angular.isFunction(item) && isSignificantValue(item, key)) {\r\n                        collectValue(item, name);\r\n                    }\r\n                }\r\n            }\r\n            return pairs;\r\n\r\n            function collectValue(value, key){\r\n                if (asString) {\r\n                    pairs.push(key + \"=\" + encodeURIComponent(value));\r\n                } else {\r\n                    pairs[key] = encodeURIComponent(value);\r\n                }\r\n            }\r\n\r\n            function isSignificantValue(value, key){\r\n                return key === \"group\" ? true : angular.isDefined(value) && value !== \"\";\r\n            }\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name NgTableParams#reload\r\n         * @description Reload table data\r\n         */\r\n        this.reload = function() {\r\n            var self = this,\r\n                pData = null;\r\n\r\n            settings.$loading = true;\r\n\r\n            prevParamsMemento = angular.copy(createComparableParams());\r\n            isCommittedDataset = true;\r\n\r\n            if (self.hasGroup()) {\r\n                pData = runInterceptorPipeline($q.when(settings.getGroups(self)));\r\n            } else {\r\n                pData = runInterceptorPipeline($q.when(settings.getData(self)));\r\n            }\r\n\r\n            log('ngTable: reload data');\r\n\r\n            var oldData = self.data;\r\n            return pData.then(function(data) {\r\n                settings.$loading = false;\r\n                errParamsMemento = null;\r\n\r\n                self.data = data;\r\n                // note: I think it makes sense to publish this event even when data === oldData\r\n                // subscribers can always set a filter to only receive the event when data !== oldData\r\n                ngTableEventsChannel.publishAfterReloadData(self, data, oldData);\r\n                self.reloadPages();\r\n\r\n                return data;\r\n            }).catch(function(reason){\r\n                errParamsMemento = prevParamsMemento;\r\n                // \"rethrow\"\r\n                return $q.reject(reason);\r\n            });\r\n        };\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name NgTableParams#hasErrorState\r\n         * @description Return true when an attempt to `reload` the current `parameter` values have resulted in\r\n         * a failure\r\n         *\r\n         * This method will continue to return true until the reload is successfully called or when the\r\n         * `parameter` values have changed\r\n         */\r\n        this.hasErrorState = function(){\r\n            return !!(errParamsMemento && angular.equals(errParamsMemento, createComparableParams()));\r\n        };\r\n\r\n        function optimizeFilterDelay(){\r\n            // don't debounce by default filter input when working with small synchronous datasets\r\n            if (settings.filterOptions.filterDelay === defaultFilterOptions.filterDelay &&\r\n                settings.total <= settings.filterOptions.filterDelayThreshold &&\r\n                settings.getData === defaultSettingsFns.getData){\r\n                settings.filterOptions.filterDelay = 0;\r\n            }\r\n        }\r\n\r\n        this.reloadPages = (function() {\r\n            var currentPages;\r\n            return function(){\r\n                var oldPages = currentPages;\r\n                var newPages = self.generatePagesArray(self.page(), self.total(), self.count());\r\n                if (!angular.equals(oldPages, newPages)){\r\n                    currentPages = newPages;\r\n                    ngTableEventsChannel.publishPagesChanged(this, newPages, oldPages);\r\n                }\r\n            }\r\n        })();\r\n\r\n        function runInterceptorPipeline(fetchedData){\r\n            var interceptors = settings.interceptors || [];\r\n\r\n            return interceptors.reduce(function(result, interceptor){\r\n                var thenFn = (interceptor.response && interceptor.response.bind(interceptor)) || $q.when;\r\n                var rejectFn = (interceptor.responseError && interceptor.responseError.bind(interceptor)) || $q.reject;\r\n                return result.then(function(data){\r\n                    return thenFn(data, self);\r\n                }, function(reason){\r\n                    return rejectFn(reason, self);\r\n                });\r\n            }, fetchedData);\r\n        }\r\n\r\n        function getDefaultSettingFns(){\r\n\r\n            return {\r\n                getData: getData,\r\n                getGroups: getGroups\r\n            };\r\n\r\n            /**\r\n             * @ngdoc method\r\n             * @name settings#getData\r\n             * @description Returns the data to display in the table\r\n             *\r\n             * Called by `NgTableParams` whenever it considers new data is to be loaded\r\n             *\r\n             * @param {Object} params the `NgTableParams` requesting data\r\n             */\r\n            function getData(params) {\r\n                return ngTableDefaultGetData(params.settings().dataset, params);\r\n            }\r\n\r\n            /**\r\n             * @ngdoc method\r\n             * @name settings#getGroups\r\n             * @description Return groups of data to display in the table\r\n             *\r\n             * Called by `NgTableParams` whenever it considers new data is to be loaded\r\n             * and when a `group` value has been assigned\r\n             *\r\n             * @param {Object} params the `NgTableParams` requesting data\r\n             */\r\n            function getGroups(params) {\r\n\r\n                var group = params.group();\r\n                var groupFn;\r\n                var sortDirection = undefined;\r\n                if (angular.isFunction(group)) {\r\n                    groupFn = group;\r\n                    sortDirection = group.sortDirection;\r\n                } else {\r\n                    // currently support for only one group implemented\r\n                    var groupField = Object.keys(group)[0];\r\n                    sortDirection = group[groupField];\r\n                    groupFn = function(item){\r\n                        return getPath(item, groupField);\r\n                    };\r\n                }\r\n                \r\n                var settings = params.settings();\r\n                var originalDataOptions = settings.dataOptions;\r\n                settings.dataOptions = { applyPaging: false };\r\n                var gotData = $q.when(settings.getData(params));\r\n                return gotData.then(function(data) {\r\n                    var groups = {};\r\n                    angular.forEach(data, function(item) {\r\n                        var groupName = groupFn(item);\r\n                        groups[groupName] = groups[groupName] || {\r\n                                data: [],\r\n                                $hideRows: !settings.groupOptions.isExpanded,\r\n                                value: groupName\r\n                            };\r\n                        groups[groupName].data.push(item);\r\n                    });\r\n                    var result = [];\r\n                    for (var i in groups) {\r\n                        result.push(groups[i]);\r\n                    }\r\n                    if (group.sortGroups && sortDirection) {\r\n                        var orderByFn = ngTableDefaultGetData.getOrderByFn();\r\n                        var orderBy = convertSortToOrderBy({\r\n                            value: sortDirection\r\n                        });\r\n                        result = orderByFn(result, orderBy);\r\n                    }\r\n\r\n                    return ngTableDefaultGetData.applyPaging(result, params);\r\n                }).finally(function(){\r\n                    // restore the real options\r\n                    settings.dataOptions = originalDataOptions;\r\n                });\r\n            }\r\n\r\n            function getPath (obj, ks) {\r\n                // origianl source https://github.com/documentcloud/underscore-contrib\r\n\r\n                if (typeof ks == \"string\") ks = ks.split(\".\");\r\n\r\n                // If we have reached an undefined property\r\n                // then stop executing and return undefined\r\n                if (obj === undefined) return void 0;\r\n\r\n                // If the path array has no more elements, we've reached\r\n                // the intended property and return its value\r\n                if (ks.length === 0) return obj;\r\n\r\n                // If we still have elements in the path array and the current\r\n                // value is null, stop executing and return undefined\r\n                if (obj === null) return void 0;\r\n\r\n                return getPath(obj[ks[0]], ks.slice(1));\r\n            }\r\n        }\r\n\r\n        var params = {\r\n            page: 1,\r\n            count: 10,\r\n            filter: {},\r\n            sorting: {},\r\n            group: {}\r\n        };\r\n        angular.extend(params, ngTableDefaults.params);\r\n\r\n        /**\r\n         * @ngdoc object\r\n         * @name settings\r\n         * @module ngTable\r\n         * @description configuration settings for `NgTableParams`\r\n         */\r\n        var settings = {\r\n            $loading: false,\r\n            dataset: null, //allows data to be set when table is initialized\r\n            total: 0,\r\n            defaultSort: 'desc',\r\n            filterOptions: angular.copy(defaultFilterOptions),\r\n            groupOptions: angular.copy(defaultGroupOptions),\r\n            counts: [10, 25, 50, 100],\r\n            interceptors: [],\r\n            paginationMaxBlocks: 11,\r\n            paginationMinBlocks: 5,\r\n            sortingIndicator: 'span'\r\n        };\r\n\r\n        this.settings(defaultSettingsFns);\r\n        this.settings(ngTableDefaults.settings);\r\n        this.settings(baseSettings);\r\n        this.parameters(baseParameters, true);\r\n\r\n        ngTableEventsChannel.publishAfterCreated(this);\r\n        // run events during construction after the initial create event. That way a consumer\r\n        // can subscribe to all events for a table without \"dropping\" an event\r\n        angular.forEach(initialEvents, function(event){\r\n            event();\r\n        });\r\n        initialEvents = null;\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nexport { ngTableParamsFactory };\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/core/ngTableParams.js\n// module id = 30\n// module chunks = 0","import angular from 'angular';\r\nimport coreModule from './src/core';\r\nimport browserModule from './src/browser';\r\n\r\nvar module = angular.module('ngTable', [coreModule.name, browserModule.name]);\r\n\r\nexport { module as default };\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./index.js\n// module id = 31\n// module chunks = 0"],"sourceRoot":""}